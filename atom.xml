<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Applehater</title>
  
  <subtitle>developer ? operator</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zh-h.github.io/"/>
  <updated>2019-10-26T21:49:24.154Z</updated>
  <id>https://zh-h.github.io/</id>
  
  <author>
    <name>Zohar Hou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP 请求 gzip 解压</title>
    <link href="https://zh-h.github.io/2018/04/10/2018/04/10/gzip-request-deompress/"/>
    <id>https://zh-h.github.io/2018/04/10/2018/04/10/gzip-request-deompress/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.154Z</updated>
    
    <content type="html"><![CDATA[<p>实际的 Web 项目中，会存在请求正文非常大的场景，例如发表长篇博客，提大量流水记录等等。这些数据如果能在本地压缩后再提交，就可以节省网络流量、减少传输时间。</p><p>一般采用的压缩方式是 gzip 请求正文会被gzip压缩过进行二进制传输，而 HTTP 头部依然是原始的文本，根据协议需要在头部注明编码 <code>Content-Encoding: gzip</code> 在服务端接收到请求后，如果支持这种格式的压缩，会把请求正文进行解压再处理。</p><p>参考<a href="https://imququ.com/post/how-to-compress-http-request-body.html" target="_blank" rel="noopener">《如何压缩 HTTP 请求正文》</a></p><h2 id="解压-gzip-请求"><a href="#解压-gzip-请求" class="headerlink" title="解压 gzip 请求"></a>解压 gzip 请求</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>Java 内置了解压缩的流， 使用流的单项管道模式，可以把 gzip 的输入流，包装成原始的输入流。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ByteArrayInputStream is = <span class="keyword">new</span> ByteArrayInputStream(someGzipBytes)  <span class="comment">// 放入压缩后的流</span></span><br><span class="line">GzipInputStream gis = <span class="keyword">new</span> GzipInputStream(is)</span><br><span class="line">String content = gis.text</span><br></pre></td></tr></table></figure><p>翻看了一遍 Spring 的接口实现，实在没有找到合适的方法进行<code>httpServletRequset.inputStream</code>的替换。使用自定义的<code>MessageConverter</code>也是比较麻烦，需要把原本的配置覆盖替换，不得知对其他转换器的影响。</p><p>另外一种方法就是使用 Servlet API 的 <code>Filter</code> 进行处理，在获取到 gzip 的请求正文时对他进行解压。<br><code>GunzipFilter.groovy</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理gzip压缩过的请求体</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 使用 web.xml 配置 filter</span></span><br><span class="line"><span class="comment"> * Spring Boot 需要在主类使用 <span class="doctag">@ServletComponentScan</span> 才能加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"gunzipFilter"</span>, urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GunzipFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(GunzipFilter.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> init(FilterConfig filterConfig) <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        LOGGER.info(<span class="string">"gunzip filter init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">        LOGGER.info(<span class="string">"request uri: &#123;&#125; Content-Encoding: &#123;&#125;"</span>, requestURI, httpServletRequest.getHeader(<span class="string">"Content-Encoding"</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"/"</span>.equals(requestURI)) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"process gzip request"</span>);</span><br><span class="line">            httpServletRequest = <span class="keyword">new</span> GunzipInputStreamWrapper(httpServletRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(httpServletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GunzipInputStreamWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ServletInputStream newServletInputStream;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> GunzipInputStreamWrapper(HttpServletRequest request) &#123;</span><br><span class="line">            <span class="keyword">super</span>(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletInputStream getInputStream() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (newServletInputStream == <span class="literal">null</span>) &#123;</span><br><span class="line">                ServletInputStream servletInputStream = <span class="keyword">super</span>.getInputStream();</span><br><span class="line">                GZIPInputStream gzipInputStream = <span class="keyword">new</span> GZIPInputStream(servletInputStream);</span><br><span class="line">                newServletInputStream = <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">boolean</span> isFinished() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">boolean</span> isReady() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> setReadListener(ReadListener readListener) &#123;&#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">int</span> read() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> gzipInputStream.read();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newServletInputStream;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h3><p>OpenResty 可以通过使用 Lua 书写逻辑，可以导入使用 Lua 的类库，也可以通过 FFI 调用 C 语言编写的动态链接库。</p><p>需要下载 Lua 的 FFI zlib 库，然后通过 lua 脚本导入。</p><ol><li>下载 <a href="https://github.com/luapower/zlib/archive/master.tar.gz" target="_blank" rel="noopener">https://github.com/luapower/zlib/archive/master.tar.gz</a></li><li>解压master.tar.gz</li><li>将<code>linux64/libz.so</code> <code>zlib_h.lua</code> <code>zlib.lua</code>复制到<code>/usr/local/openresty/lualib/</code></li><li>在<code>/usr/local/openresty/lualib/</code>创建<code>gunzip.lua</code>文件</li><li><p>在文件中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">local ffi  = require &quot;ffi&quot;</span><br><span class="line">local zlib = require &quot;zlib&quot;</span><br><span class="line"></span><br><span class="line">local function reader(s)</span><br><span class="line">    local done</span><br><span class="line">    return function()</span><br><span class="line">        if done then return end</span><br><span class="line">        done = true</span><br><span class="line">        return s</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local function writer()</span><br><span class="line">    local t = &#123;&#125;</span><br><span class="line">    return function(data, sz)</span><br><span class="line">        if not data then return table.concat(t) end</span><br><span class="line">        t[#t + 1] = ffi.string(data, sz)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local encoding = ngx.req.get_headers()[&apos;Content-Encoding&apos;]</span><br><span class="line">ngx.log(ngx.INFO, &quot;encoding: &quot;..encoding)</span><br><span class="line"></span><br><span class="line">if encoding == &apos;gzip&apos; or encoding == &apos;deflate&apos; or encoding == &apos;deflate-raw&apos; then</span><br><span class="line">    ngx.req.clear_header(&apos;Content-Encoding&apos;);</span><br><span class="line">    ngx.req.read_body()</span><br><span class="line"></span><br><span class="line">    local body = ngx.req.get_body_data()</span><br><span class="line"></span><br><span class="line">    if body then</span><br><span class="line">        ngx.log(ngx.INFO, &quot;unzip body&quot;)</span><br><span class="line">        local write = writer()</span><br><span class="line">        local map = &#123;</span><br><span class="line">            gzip = &apos;gzip&apos;, </span><br><span class="line">            deflate = &apos;zlib&apos;, </span><br><span class="line">            [&apos;deflate-raw&apos;] = &apos;deflate&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        local format = map[encoding]</span><br><span class="line">        zlib.inflate(reader(body), write, nil, format)</span><br><span class="line">        ngx.req.set_body_data(write())</span><br><span class="line">    end</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>/usr/local/openresty/nginx/conf/nginx.conf</code>在<code>server</code>块插入一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># call request body to lua context</span><br><span class="line">location / &#123;</span><br><span class="line">    # 非常重要，否则大文件解压因为被放到文件里导致读取的时候乱码</span><br><span class="line">client_body_buffer_size 2048k;  </span><br><span class="line">access_by_lua_file /usr/local/openresty/lualib/resty/gunzip.lua;</span><br><span class="line">proxy_pass http://192.168.150.226:8800;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/usr/local/openresty/nginx/sbin/nginx -s reload</code> 重载更新脚本。</p></li></ol><p>OpenResty 映射对应需要请求的 URL 然后在对应的处理或者转发前执行 Lua 脚本，Lua 脚本判断请求类型读取请求体，并且使用 zlib 将其解压，然后再写回请求体，最后再把 <code>Content-Encoding</code> 清除，放置后端再做错误处理。</p><h2 id="使用-gzip-压缩请求"><a href="#使用-gzip-压缩请求" class="headerlink" title="使用 gzip 压缩请求"></a>使用 gzip 压缩请求</h2><h3 id="CURL"><a href="#CURL" class="headerlink" title="CURL"></a>CURL</h3><p>先用 gzip 工具压缩，然后 curl 命令行工具支持提交 gzip 的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&#123;\"msg\":\"hello\"&#125;"</span> | gzip -c &gt; data.txt.gz</span><br><span class="line">curl -v --data-binary @data.txt.gz -H<span class="string">'Content-Type: application/json charset=UTF-8'</span> -H<span class="string">'Content-Encoding: gzip'</span> -X POST http://localhost:8800</span><br></pre></td></tr></table></figure></p><h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h3><p>Java 同样提供了内置的 gzip 工具类，可以使用 <code>GzipOutputStream</code> 将输出流替换成压缩过的输出流，然后将压缩后的流通过 Socket 提交。</p><p>OkHttP 提供自定义请求正文的方法，可以把请求正文的格式替换为 gzip<br><code>GzipRequest.groovy</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GzipRequest</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> MediaType JSON = MediaType.parse(<span class="string">"application/json charset=utf-8"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    <span class="keyword">final</span> String CONTENT = <span class="keyword">new</span> File(<span class="string">'C:\\Users\\Administrator\\Documents\\data-flow.json'</span>).text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">            .addInterceptor(<span class="keyword">new</span> GzipRequestInterceptor())</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        String content = <span class="string">'''&#123;"msg":"hello"&#125;'''</span></span><br><span class="line">        content = CONTENT</span><br><span class="line">        RequestBody body = RequestBody.create(JSON, content)</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(<span class="string">'http://localhost:8800/?name=age'</span>)</span><br><span class="line">                .post(body)</span><br><span class="line">                .build()</span><br><span class="line">        Response response = client.newCall(request).execute()</span><br><span class="line">        String responseBody = response.body().string()</span><br><span class="line">        log.info(responseBody)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GzipRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> &#123;</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Response intercept(Chain chain) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            Request originalRequest = chain.request()</span><br><span class="line">            <span class="keyword">if</span> (originalRequest.body() == <span class="literal">null</span> || originalRequest.header(<span class="string">"Content-Encoding"</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> chain.proceed(originalRequest)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Request compressedRequest = originalRequest.newBuilder()</span><br><span class="line">                    .header(<span class="string">"Content-Encoding"</span>, <span class="string">"gzip"</span>)</span><br><span class="line">                    .method(originalRequest.method(), gzip(originalRequest.body()))</span><br><span class="line">                    .build()</span><br><span class="line">            <span class="keyword">return</span> chain.proceed(compressedRequest)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RequestBody gzip(<span class="keyword">final</span> RequestBody body) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> MediaType contentType() &#123;</span><br><span class="line">                    <span class="keyword">return</span> body.contentType()</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">long</span> contentLength() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span> <span class="comment">// We don't know the compressed length in advance!</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> writeTo(BufferedSink sink) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    BufferedSink gzipSink = Okio.buffer(<span class="keyword">new</span> GzipSink(sink))</span><br><span class="line">                    body.writeTo(gzipSink)</span><br><span class="line">                    gzipSink.close()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实际的 Web 项目中，会存在请求正文非常大的场景，例如发表长篇博客，提大量流水记录等等。这些数据如果能在本地压缩后再提交，就可以节省网络流量、减少传输时间。&lt;/p&gt;
&lt;p&gt;一般采用的压缩方式是 gzip 请求正文会被gzip压缩过进行二进制传输，而 HTTP 头部依然是原
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>MongoDB MapReduce</title>
    <link href="https://zh-h.github.io/2017/12/15/2017/12/15/spring-data-mongo-map-reduce/"/>
    <id>https://zh-h.github.io/2017/12/15/2017/12/15/spring-data-mongo-map-reduce/</id>
    <published>2017-12-14T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.154Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB的MapReduce可以实现复杂的聚合统计功能，并能够分发到各个数据副本中执行能够快速处理大量的数据。<br>需要实现map函数和reduce函数，map函数组合格式化属性实现创建对象属性的映射，map函数的结果作为reduce函数的参数，reduce函数可以做数据的计算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// TODO</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MongoDB的MapReduce可以实现复杂的聚合统计功能，并能够分发到各个数据副本中执行能够快速处理大量的数据。&lt;br&gt;需要实现map函数和reduce函数，map函数组合格式化属性实现创建对象属性的映射，map函数的结果作为reduce函数的参数，reduce函数可以
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="Spring" scheme="https://zh-h.github.io/tags/Spring/"/>
    
      <category term="MongoDB" scheme="https://zh-h.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>RefreshScope 生效条件</title>
    <link href="https://zh-h.github.io/2017/12/10/2017/12/10/spring-cloud-config-refresh-scope/"/>
    <id>https://zh-h.github.io/2017/12/10/2017/12/10/spring-cloud-config-refresh-scope/</id>
    <published>2017-12-09T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud-Config-更新配置"><a href="#Spring-Cloud-Config-更新配置" class="headerlink" title="Spring Cloud Config 更新配置"></a>Spring Cloud Config 更新配置</h2><p>Spring Cloud Netflix Bus是Spring Cloud的消息机制,当Git Repository 改变时,通过POST请求Config Server的/bus/refresh,Config Server 会从repository获取最新的信息并通过amqp传递给client,如图所示.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://segmentfault.com/img/bVAhXA?w=1429&h=580" alt="https://segmentfault.com/img/bVAhXA?w=1429&h=580" title="">                </div>                <div class="image-caption">https://segmentfault.com/img/bVAhXA?w=1429&h=580</div>            </figure><p>Spring Cloud Bus的更新只对三种情况有效</p><ol><li>@ConfigurationProperties</li><li>@RefreshScope</li><li>日志级别</li></ol><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p>使用 Java 定义类匹配配置文件中的声明<br>应用代码<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">'api'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Api</span>&#123;</span></span><br><span class="line">    String host</span><br><span class="line">    Integer port</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiService</span>&#123;</span></span><br><span class="line">    <span class="meta">@Autowrired</span></span><br><span class="line">    Api api</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> hello()&#123;</span><br><span class="line">        restTemplate.getForObject(<span class="string">"$&#123;api.host&#125;:$&#123;api.port&#125;"</span>, String)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">api:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6666</span></span><br></pre></td></tr></table></figure></p><p>当配置中心更新了配置文件后，会通过消息通知客户端拉取新的配置，@ConfigurationProperties 注解的类会及时得到更新。</p><h2 id="RefreshScope"><a href="#RefreshScope" class="headerlink" title="@RefreshScope"></a>@RefreshScope</h2><p>如果涉及消息队列或者数据库连接的配置，就需要声明 @RefreshScope</p><p>声明 @RefreshScope 后如果使用了注入的 property 类或者使用 @Value(‘${a.b,c}’) 语法取配置，收到刷新配置的消息时，将重新初始化类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@RefreshScope</span><br><span class="line">@RabbitHandler(queues=&apos;$&#123;rcs.mq.strategyResponse&#125;&apos;)</span><br><span class="line">class StrategyLisener&#123;</span><br><span class="line">    void hander(String message)&#123;</span><br><span class="line">        // TODO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷新配置将会重新初始化这个类，并且监听的是新配置的队列名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Cloud-Config-更新配置&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Config-更新配置&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Config 更新配置&quot;&gt;&lt;/a&gt;Spring Cloud C
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="Spring Cloud" scheme="https://zh-h.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ 的消息属性说明</title>
    <link href="https://zh-h.github.io/2017/12/01/2017/12/1/rabbit-mq-properties/"/>
    <id>https://zh-h.github.io/2017/12/01/2017/12/1/rabbit-mq-properties/</id>
    <published>2017-11-30T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<br>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。<br>RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p><h2 id="RabbiMQ-RPC-应用"><a href="#RabbiMQ-RPC-应用" class="headerlink" title="RabbiMQ  RPC 应用"></a>RabbiMQ  RPC 应用</h2><p>MQ本身是基于异步的消息处理，前面的示例中所有的生产者（P）将消息发送到RabbitMQ后不会知道消费者（C）处理成功或者失败（甚至连有没有消费者来处理这条消息都不知道）。</p><p>但实际的应用场景中，我们很可能需要一些同步处理，需要同步等待服务端将我的消息处理完成后再进行下一步处理。这相当于RPC（Remote Procedure Call，远程过程调用）。在RabbitMQ中也支持RPC。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://cdndiggerplus.b0.upaiyun.com/wp-files/2014/02/2014-2-21-9-59-04.png" alt="http://cdndiggerplus.b0.upaiyun.com/wp-files/2014/02/2014-2-21-9-59-04.png" title="">                </div>                <div class="image-caption">http://cdndiggerplus.b0.upaiyun.com/wp-files/2014/02/2014-2-21-9-59-04.png</div>            </figure></p><ul><li>客户端发送请求（消息）时，在消息的属性（MessageProperties，在AMQP协议中定义了14中properties，这些属性会随着消息一起发送）中设置两个值replyTo（一个Queue名称，用于告诉服务器处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，服务器处理完成后需要将此属性返还，客户端将根据这个id了解哪条请求被成功执行了或执行失败）</li><li>服务器端收到消息并处理</li><li>服务器端处理完消息后，将生成一条应答消息到replyTo指定的Queue，同时带上correlationId属性</li><li>客户端之前已订阅replyTo指定的Queue，从中收到服务器的应答消息后，根据其中的correlationId属性分析哪条请求被执行了，根据执行结果进行后续业务处理</li></ul><h2 id="RabbitMQ-AMQP-properties-规范"><a href="#RabbitMQ-AMQP-properties-规范" class="headerlink" title="RabbitMQ AMQP properties 规范"></a>RabbitMQ AMQP properties 规范</h2><p>在开发环境中，需要使用 RabbitMQ 的管理面板进行消息的模拟发送，契约规定了微服务相互间的序列化使用 JSON，但是陷入了苦恼之中。</p><p>在表单中填写 properties 为 ContentType:application/json 无效！Spring AMQP 依然会把消息当作默认的类型进行处理，也就是对象流！点击源码一步步跳转深入发现，解析 properties 键值对的过程中，键并不是类似于 HTTP 的 Header 使用连字符，而是使用下划线，并且是小写！</p><p>就是 content_type:application/json 才会当作 json 类型的消息进行解析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h2&gt;&lt;p&gt;AMQP，即Advanced Message Queuing Protocol，高级消息队列
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="RabbitMQ" scheme="https://zh-h.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 使用内嵌 Mongo 进行测试</title>
    <link href="https://zh-h.github.io/2017/11/26/2017/11/26/Spring-Boot-With-Embedded-MongoDB-for-testing/"/>
    <id>https://zh-h.github.io/2017/11/26/2017/11/26/Spring-Boot-With-Embedded-MongoDB-for-testing/</id>
    <published>2017-11-25T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何进行数据库操作层的单元测试"><a href="#如何进行数据库操作层的单元测试" class="headerlink" title="如何进行数据库操作层的单元测试"></a>如何进行数据库操作层的单元测试</h2><p>如何进行测试保证数据库操作层的语法正确，如果使用外部链接的数据库，不仅速度慢，数据定义麻烦而且违反了单元测试无外部依赖的规范。因此需要指定模拟的类库进行数据库操作，并且这个数据库是可以对语法进行检查。</p><h2 id="Embedded-MongoDB"><a href="#Embedded-MongoDB" class="headerlink" title="Embedded MongoDB"></a>Embedded MongoDB</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>build.gradle<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">"org.mongodb:mongo-java-driver:2.12.2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    testCompile <span class="string">"junit:junit:4.11"</span></span><br><span class="line">    testCompile <span class="string">"de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.46.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="脚手架MongodbBaseTest"><a href="#脚手架MongodbBaseTest" class="headerlink" title="脚手架MongodbBaseTest"></a>脚手架MongodbBaseTest</h3><p>编写一个MongoBaseTest，这样所有需要Mongo的测试，可以继承这个类，就可以获取db了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongodbBaseTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MongodStarter starter = MongodStarter.getDefaultInstance();</span><br><span class="line">    <span class="keyword">protected</span> MongoClient mongo;</span><br><span class="line">    <span class="keyword">protected</span> DB db;</span><br><span class="line">    <span class="keyword">private</span> MongodExecutable mongodExecutable;</span><br><span class="line">    <span class="keyword">private</span> MongodProcess mongod;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mongodExecutable = starter.prepare(<span class="keyword">new</span> MongodConfigBuilder()</span><br><span class="line">                .version(Version.Main.PRODUCTION)</span><br><span class="line">                .net(<span class="keyword">new</span> Net(<span class="number">12345</span>, Network.localhostIsIPv6())).build());</span><br><span class="line">        mongod = mongodExecutable.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mongo = <span class="keyword">new</span> MongoClient(<span class="string">"localhost"</span>, <span class="number">12345</span>);</span><br><span class="line">        db = mongo.getDB(<span class="string">"embedded-mongo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mongod.stop();</span><br><span class="line">        mongodExecutable.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写UserTest"><a href="#编写UserTest" class="headerlink" title="编写UserTest"></a>编写UserTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> <span class="keyword">extends</span> <span class="title">MongodbBaseTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DBCollection users;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setUp();</span><br><span class="line">        users = db.getCollection(<span class="string">"users"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_insert_and_get_user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DBObject userDocument = <span class="keyword">new</span> BasicDBObjectBuilder()</span><br><span class="line">                .add(<span class="string">"name"</span>, <span class="string">"kiwi"</span>)</span><br><span class="line">                .get();</span><br><span class="line">        users.insert(userDocument);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DBObject userDocumentFromDb = users.findOne(<span class="keyword">new</span> BasicDBObject(<span class="string">"_id"</span>, userDocument.get(<span class="string">"_id"</span>)));</span><br><span class="line"></span><br><span class="line">        assertThat(userDocumentFromDb.get(<span class="string">"name"</span>), is(<span class="string">"kiwi"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自此单元测试中有关数据库层都是 Embedded MongoDB 进行模拟，这样保证语法验证的同时避免了外部资源的依赖。</p><h2 id="Embedded-MongoDB-与-Spring-Test-结合"><a href="#Embedded-MongoDB-与-Spring-Test-结合" class="headerlink" title="Embedded MongoDB 与 Spring Test 结合"></a>Embedded MongoDB 与 Spring Test 结合</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何进行数据库操作层的单元测试&quot;&gt;&lt;a href=&quot;#如何进行数据库操作层的单元测试&quot; class=&quot;headerlink&quot; title=&quot;如何进行数据库操作层的单元测试&quot;&gt;&lt;/a&gt;如何进行数据库操作层的单元测试&lt;/h2&gt;&lt;p&gt;如何进行测试保证数据库操作层的语法正
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="Spring Boot" scheme="https://zh-h.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java Promise 实现</title>
    <link href="https://zh-h.github.io/2017/11/17/2017/11/17/java-promise/"/>
    <id>https://zh-h.github.io/2017/11/17/2017/11/17/java-promise/</id>
    <published>2017-11-16T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-ExcuteService"><a href="#使用-ExcuteService" class="headerlink" title="使用 ExcuteService"></a>使用 ExcuteService</h2><p>可以根据自己的需要来创建壹個 ExecutorService ，也可以使用 Executors 工厂方法来创建壹個 ExecutorService 实例。这里有几個创建 ExecutorService 的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService1 = Executors.newSingleThreadExecutor();  </span><br><span class="line">ExecutorService executorService2 = Executors.newFixedThreadPool(<span class="number">10</span>);  </span><br><span class="line">ExecutorService executorService3 = Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><h3 id="ExecutorService-使用方法"><a href="#ExecutorService-使用方法" class="headerlink" title="ExecutorService 使用方法"></a>ExecutorService 使用方法</h3><p>这里有几种不同的方式让你将任务委托给壹個 ExecutorService：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execute(Runnable)  </span><br><span class="line">submit(Runnable)  </span><br><span class="line">submit(Callable)  </span><br><span class="line">invokeAny(...)  </span><br><span class="line">invokeAll(...)</span><br></pre></td></tr></table></figure></p><h4 id="execute-Runnable"><a href="#execute-Runnable" class="headerlink" title="execute(Runnable)"></a>execute(Runnable)</h4><p>方法 execute(Runnable) 接收壹個 java.lang.Runnable 对象作为参数，并且以异步的方式执行它。如下是壹個使用 ExecutorService 执行 Runnable 的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newSingleThreadExecutor();  </span><br><span class="line">    </span><br><span class="line">executorService.execute(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"Asynchronous task"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">        </span><br><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure></p><p>使用这种方式没有办法获取执行 Runnable 之后的结果，如果你希望获取运行之后的返回值，就必须使用 接收 Callable 参数的 execute() 方法，后者将会在下文中提到。</p><h4 id="submit-Runnable"><a href="#submit-Runnable" class="headerlink" title="submit(Runnable)"></a>submit(Runnable)</h4><p>方法 submit(Runnable) 同样接收壹個 Runnable 的实现作为参数，但是会返回一个 Future 对象。这個 Future 对象可以用于判断 Runnable 是否结束执行。如下是壹個 ExecutorService 的 submit() 方法的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Future future = executorService.submit(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"Asynchronous task"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">//如果任务结束执行则返回 null  </span></span><br><span class="line">System.out.println(<span class="string">"future.get()="</span> + future.get());</span><br></pre></td></tr></table></figure></p><h4 id="submit-Callable"><a href="#submit-Callable" class="headerlink" title="submit(Callable)"></a>submit(Callable)</h4><p>方法 submit(Callable) 和方法 submit(Runnable) 比较类似，但是区别则在于它们接收不同的参数类型。Callable 的实例与 Runnable 的实例很类似，但是 Callable 的 call() 方法可以返回壹個结果。方法 Runnable.run() 则不能返回结果。</p><p>Callable 的返回值可以从方法 submit(Callable) 返回的 Future 对象中获取。如下是壹個 ExecutorService Callable 的样例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future future = executorService.submit(<span class="keyword">new</span> Callable()&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"Asynchronous Callable"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Callable Result"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="string">"future.get() = "</span> + future.get());</span><br></pre></td></tr></table></figure></p><p>上述样例代码会输出如下结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newSingleThreadExecutor();  </span><br><span class="line">    </span><br><span class="line">Set&lt;Callable&lt;String&gt;&gt; callables = <span class="keyword">new</span> HashSet&lt;Callable&lt;String&gt;&gt;();  </span><br><span class="line">    </span><br><span class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Task 1"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Task 2"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Task 3"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">    </span><br><span class="line">String result = executorService.invoke(callables);  </span><br><span class="line">    </span><br><span class="line">System.out.println(<span class="string">"result = "</span> + result);  </span><br><span class="line">    </span><br><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure></p><p>如果把当中 Callable 的方法作为 Http 请求，那么就可以实现多个 HTTP 请求并发，一个请求异常整个调用异常，最后一个请求完成，整个调用完成。极大利用了 Java 的线程管理和网络带宽。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用-ExcuteService&quot;&gt;&lt;a href=&quot;#使用-ExcuteService&quot; class=&quot;headerlink&quot; title=&quot;使用 ExcuteService&quot;&gt;&lt;/a&gt;使用 ExcuteService&lt;/h2&gt;&lt;p&gt;可以根据自己的需要来创建壹個
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="promise" scheme="https://zh-h.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>Groovy 踩坑纪实</title>
    <link href="https://zh-h.github.io/2017/11/10/2017/11/10/groovy-hole/"/>
    <id>https://zh-h.github.io/2017/11/10/2017/11/10/groovy-hole/</id>
    <published>2017-11-09T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式匹配取反"><a href="#模式匹配取反" class="headerlink" title="模式匹配取反"></a>模式匹配取反</h2><p>Groovy 提供了简便的正则语法，可以很方便进行模式匹配和断言。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> regex = ~<span class="string">'Groovy'</span></span><br></pre></td></tr></table></figure><p>当Groovy运算符=〜在if和while语句（见第8章）中作为谓词（返回布尔值的表达式）出现时，左侧的String操作数与右侧的正则表达式操作数匹配。因此，以下每个都传递值true。</p><p>当定义正则表达式时，可以使用以下特殊字符:</p><ul><li>有两个特殊的位置字符用于表示一行的开始和结束：caret（∧）和美元符号（$）。</li><li>正则表达式也可以包括量词。加号（+）表示一次或多次，应用于表达式的前一个元素。星号（*）用于表示零个或多个出现。问号（？）表示零或一次。</li><li>元字符{和}用于匹配前一个字符的特定数量的实例。</li><li>在正则表达式中，句点符号（。）可以表示任何字符。这被描述为通配符。</li><li>正则表达式可以包括字符类。一组字符可以作为简单的字符序列，包含在元字符[和]中，如[aeiou]中。对于字母或数字范围，可以使用[a-z]或[a-mA-M]中的短划线分隔符。字符类的补码由方括号内的前导插入符号表示，如[∧a-z]中所示，并表示除指定的字符以外的所有字符。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Groovy'</span> =~ <span class="string">'Groovy'</span> </span><br><span class="line"><span class="string">'Groovy'</span> =~ <span class="string">'oo'</span> </span><br><span class="line"><span class="string">'Groovy'</span> ==~ <span class="string">'Groovy'</span> </span><br><span class="line"><span class="string">'Groovy'</span> ==~ <span class="string">'oo'</span> </span><br><span class="line"><span class="string">'Groovy'</span> =~ <span class="string">'∧G'</span> </span><br><span class="line">‘Groovy<span class="string">' =~ '</span>G$<span class="string">' </span></span><br><span class="line"><span class="string">‘Groovy'</span> =~ <span class="string">'Gro*vy'</span> <span class="string">'Groovy'</span> =~ <span class="string">'Gro&#123;2&#125;vy'</span></span><br></pre></td></tr></table></figure><h4 id="ATTENTIONS"><a href="#ATTENTIONS" class="headerlink" title="ATTENTIONS"></a>ATTENTIONS</h4><p>当使用一个等号 = 表示匹配，即 Matcher.matches()<br>使用两个等号 == 表示取组，即 Mathcer.groups()<br>如果需要取反条件，想当然使用 ! 插入表达式进行取反，结果是不会正常的。<br><strong><em> 使用 != 语法是无意义的，它表示 matches() 取反，matcher() 会一直有值， 因此不管什么样的输入都将返回False </em></strong></p><p>正确做法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;machine-a&apos; =~~ &apos;machine-[abc]&apos;  // 使用两个 ~~</span><br><span class="line">!(&apos;machine-a&apos; =~ &apos;machine-[abc]&apos;) // 表达式使用括号包围得返回值取反</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模式匹配取反&quot;&gt;&lt;a href=&quot;#模式匹配取反&quot; class=&quot;headerlink&quot; title=&quot;模式匹配取反&quot;&gt;&lt;/a&gt;模式匹配取反&lt;/h2&gt;&lt;p&gt;Groovy 提供了简便的正则语法，可以很方便进行模式匹配和断言。&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="Groovy" scheme="https://zh-h.github.io/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>TypeSript 快速上手</title>
    <link href="https://zh-h.github.io/2017/11/05/2017/11/5/typescript-start-up/"/>
    <id>https://zh-h.github.io/2017/11/05/2017/11/5/typescript-start-up/</id>
    <published>2017-11-04T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TypeScript-特性"><a href="#TypeScript-特性" class="headerlink" title="TypeScript 特性"></a>TypeScript 特性</h2><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。TypeScript 通常先进与 ECAMScript 标准实现，如当前试验阶段的装饰器语法也会最先得到使用。</p><p>使用 TypeScript 带来的好处:</p><ol><li>可以使用最新的 ES2017 语言特性</li><li>确定类型的智能代码提示,像单纯 Javascrit 还要人肉对比变量名拼写就十分痛苦。</li><li>编辑代码时具有及时错误检查功能，可以避免诸如输错函数名这种明显的错误</li><li>非常精准的代码重构功能</li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><p>使用 npm 全局安装 tsc。</p><h3 id="tsconfig-json-配置文件"><a href="#tsconfig-json-配置文件" class="headerlink" title="tsconfig.json 配置文件"></a>tsconfig.json 配置文件</h3><p>每个 TypeScript 项目都需要一个 tsconfig.json 描述，告知编译器进行怎么样的处理：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line"><span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line"><span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line"><span class="attr">"outDir"</span>: <span class="string">"out"</span>,</span><br><span class="line"><span class="attr">"lib"</span>: [</span><br><span class="line"><span class="string">"es6"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"rootDir"</span>: <span class="string">"src"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"exclude"</span>: [</span><br><span class="line"><span class="string">"node_modules"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细的字段更改请参考：<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html" target="_blank" rel="noopener">https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html</a></p><h3 id="安装声明文件"><a href="#安装声明文件" class="headerlink" title="安装声明文件"></a>安装声明文件</h3><p>非 Typescript 编写的模块需要提供 tds 文件供编译器和 IDE 使用。Node.js 的 API 也要提供，使用<code>npm I @types/node</code> 进行安装。</p><h3 id="创建-vscode-运行配置"><a href="#创建-vscode-运行配置" class="headerlink" title="创建 vscode 运行配置"></a>创建 vscode 运行配置</h3><p>使用 vscode 对 Typescript 有很好的支持，如果需要执行单一的 Typescrit 源码还要另外设置运行配置。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line"><span class="attr">"request"</span>: <span class="string">"attach"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Attach by Process ID"</span>,</span><br><span class="line"><span class="attr">"processId"</span>: <span class="string">"$&#123;command:PickProcess&#125;"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line"><span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Launch Program"</span>,</span><br><span class="line">"program": "$&#123;file&#125;", // 这个需要配置</span><br><span class="line">"outFiles": [</span><br><span class="line">"$&#123;workspaceFolder&#125;/out/**/*.js" // 这个</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面的配置，执行了一个任务在后台运行<code>tsc -P -w</code>实时监控文件变更并及时编译，运行配置为执行源码编译输出对应的 js 文件。</p><h2 id="语法概览"><a href="#语法概览" class="headerlink" title="语法概览"></a>语法概览</h2><p>使用 Java 或者 C# 编程经验的人会对此非常熟悉，因为 Typescrit 的设计者就是 C# 的设计者。</p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><p>与 Java 最大的不同可能就是类型声明是写在变量名之后。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:string = <span class="string">'a'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a:string</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法声明包括输入参数和返回参数等，每个参数的顺序都是有意义的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">cb:(a:string</span>):<span class="title">void</span>)</span>&#123;</span><br><span class="line">    cb(<span class="string">'lalal'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>以下是 TypeScript 中的几种基础类型：</p><ul><li>boolean为布尔值类型，如let isDone: Boolean = false</li><li>number为数值类型，如let decimal: number = 6;</li><li>string为字符串类型，如let color: string = ‘blue’</li><li>数组类型，如let list: number[] = [ 1, 2, 3 ]</li><li>元组类型，如let x: [ string, number ] = [ “hello”, 10 ]</li><li>枚举类型，如enum Color { Red, Green, Blue }; let c: Color = Color.Green</li><li>any为任意类型，如let notSure: any = 4; notSure = “maybe a string instead”</li><li>void为空类型，如let unusable: void = undefined</li><li>null和undefined</li><li>never表示没有值的类型，如function error(message: string): never { throw new Error(message); }</li></ul><p>多种类型可以用|隔开，比如number | string表示可以是number或string类型</p><h3 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h3><p>以下是接口的几种常见形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义具有 color 和 width 属性的对象</span></span><br><span class="line">interface SuperConfug &#123;</span><br><span class="line">  color: string;</span><br><span class="line">  width: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readonly 表示只读，不能对其属性进行重新赋值</span></span><br><span class="line">interface Point &#123;</span><br><span class="line">  readonly x: number;</span><br><span class="line">  readonly y: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?表示属性是可选的，</span></span><br><span class="line"><span class="comment">// [propName: string]: any 表示允许 obj[xxx] 这样的动态属性</span></span><br><span class="line">interface SquareConfig &#123;</span><br><span class="line">  color?: string;</span><br><span class="line">  width?: number;</span><br><span class="line">  [propName: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数接口</span></span><br><span class="line">interface SearchFunc &#123;</span><br><span class="line">  (source: string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际上 TypeScript 的接口还有很多种的表示形式，详细信息可以参考这里：TypeScript Hankbook - Interfaces<br>函数</p><p>以下是几种函数接口的定义方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: number, b: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file: string, callback: (err: Error | null, data: Buffer</span>) =&gt; <span class="title">void</span>) </span>&#123;</span><br><span class="line">  fs.readFile(file, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 type 语句定义类型</span></span><br><span class="line">type CallbackFunction = <span class="function">(<span class="params">err: <span class="built_in">Error</span> | <span class="literal">null</span>, data: Buffer</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file: string, callback: CallbackFunction</span>) </span>&#123;</span><br><span class="line">  fs.readFile(file, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 interface 语句来定义类型</span></span><br><span class="line">interface CallbackFunction &#123;</span><br><span class="line">  (err: <span class="built_in">Error</span> | <span class="literal">null</span>, <span class="attr">data</span>: Buffer): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file: string, callback: CallbackFunction</span>) </span>&#123;</span><br><span class="line">  fs.readFile(file, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上几种定义方式有着微妙的差别，还是需要在深入实践 TypeScript 后才能合理地运用。详细信息可以参考这里：TypeScript Handbook - Functions<br>类</p><p>TypeScript 的类定义跟 JavaScript 的定义方法类型一样，但是增加了public, private, protected, readonly等访问控制修饰符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  protected name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  private department: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name: string, department: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.department = department;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public getElevatorPitch() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="keyword">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>TypeScript 的泛型和接口使得具备较强的类型检查能力的同时，很好地兼顾了 JavaScript 语言的动态特性。以下是使用泛型的简单例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function identity&lt;T&gt;(arg: T): T &#123;</span><br><span class="line">  return arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const map = new Map&lt;string, number&gt;();</span><br><span class="line">map.set(&apos;a&apos;, 123);</span><br><span class="line"></span><br><span class="line">function sleep(ms: number): Promise&lt;number&gt; &#123;</span><br><span class="line">  return new Promise&lt;number&gt;((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; resolve(ms), ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TypeScript-特性&quot;&gt;&lt;a href=&quot;#TypeScript-特性&quot; class=&quot;headerlink&quot; title=&quot;TypeScript 特性&quot;&gt;&lt;/a&gt;TypeScript 特性&lt;/h2&gt;&lt;p&gt;TypeScript 是一种由微软开发的自由和开源的
      
    
    </summary>
    
      <category term="Javascript" scheme="https://zh-h.github.io/categories/Javascript/"/>
    
    
      <category term="TypeScript" scheme="https://zh-h.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 扩展/插件开发</title>
    <link href="https://zh-h.github.io/2017/10/31/2017/10/31/vscode-extension-developement/"/>
    <id>https://zh-h.github.io/2017/10/31/2017/10/31/vscode-extension-developement/</id>
    <published>2017-10-30T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="安装生成器"><a href="#安装生成器" class="headerlink" title="安装生成器"></a>安装生成器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br></pre></td></tr></table></figure><h3 id="运行生成器"><a href="#运行生成器" class="headerlink" title="运行生成器"></a>运行生成器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo code</span><br></pre></td></tr></table></figure><p><a href="https://code.visualstudio.com/images/yocode_yocode.png" target="_blank" rel="noopener">yo code</a><br>选择 New Extension (TypeScript),然后按照提示创建工程</p><h3 id="运行扩展"><a href="#运行扩展" class="headerlink" title="运行扩展"></a>运行扩展</h3><ol><li>使用vscode打开刚创建的项目</li><li>按F5，稍等下载依赖，然后会自动新打开一个用来调试的新窗口</li><li>ctrl+shit+p 运行 Hello World命令</li></ol><h2 id="扩展接口使用"><a href="#扩展接口使用" class="headerlink" title="扩展接口使用"></a>扩展接口使用</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol><li><p>编辑<code>src/extension.ts</code>添加一条新的命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.subscriptions.push(vscode.commands.registerCommand(<span class="string">'extension.connect'</span>,()=&gt;&#123;</span><br><span class="line">    vscode.window.showInformationMessage(<span class="string">'Connecting'</span>)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>package.json</code>注册这条新命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"commands": [&#123;</span><br><span class="line">    "command": "extension.sayHello",</span><br><span class="line">    "title": "Hello World"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"extension.connect"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"Connect"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>运行插件</p></li><li>ctrl+shit+p 输入命令 Hello World 激活该插件，只有激活插件后才能响应其他插件的命令，否则执行命令会报错<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"activationEvents": [</span><br><span class="line">    "onCommand:extension.sayHello"  // 在输入这个命令后会激活插件</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ol><p>激活插件会触发<code>src/extension.ts</code>的 activate 方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this method is called when your extension is activated</span></span><br><span class="line"><span class="comment">// your extension is activated the very first time the command is executed</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>因此插件的连接资源和其他全局使用的属性可以在这个方法后进行初始化</p><ol><li>输入命令 Connect ，然后会弹出消息提示 Connecting，vscode 执行了这个命令内的代码块</li><li>激活插件的事件参考<br><a href="https://code.visualstudio.com/docs/extensionAPI/activation-events" target="_blank" rel="noopener">https://code.visualstudio.com/docs/extensionAPI/activation-events</a><br>如工作区包含特定文件<code>.PPYP.json</code>就自动激活插件<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"activationEvents": [</span><br><span class="line">    <span class="string">"workspaceContains:.PPYP.json"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><h4 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h4><p>参考 <a href="https://code.visualstudio.com/docs/getstarted/settings#_settings-and-security" target="_blank" rel="noopener">https://code.visualstudio.com/docs/getstarted/settings#_settings-and-security</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"editor.action.toggleTabFocusMode"</span>,</span><br><span class="line"><span class="string">"workbench.action.debug.continue"</span>,</span><br><span class="line"><span class="string">"workbench.action.debug.pause"</span>,</span><br><span class="line"><span class="string">"workbench.action.debug.restart"</span>,</span><br><span class="line"><span class="string">"workbench.action.debug.run"</span>,</span><br><span class="line"><span class="string">"workbench.action.debug.start"</span>,</span><br><span class="line"><span class="string">"workbench.action.debug.stop"</span>,</span><br><span class="line"><span class="string">"workbench.action.focusActiveEditorGroup"</span>,</span><br><span class="line"><span class="string">"workbench.action.focusFirstEditorGroup"</span>,</span><br><span class="line"><span class="string">"workbench.action.focusSecondEditorGroup"</span>,</span><br><span class="line"><span class="string">"workbench.action.focusThirdEditorGroup"</span>,</span><br><span class="line"><span class="string">"workbench.action.navigateDown"</span>,</span><br><span class="line"><span class="string">"workbench.action.navigateLeft"</span>,</span><br><span class="line"><span class="string">"workbench.action.navigateRight"</span>,</span><br><span class="line"><span class="string">"workbench.action.navigateUp"</span>,</span><br><span class="line"><span class="string">"workbench.action.openNextRecentlyUsedEditorInGroup"</span>,</span><br><span class="line"><span class="string">"workbench.action.openPreviousRecentlyUsedEditorInGroup"</span>,</span><br><span class="line"><span class="string">"workbench.action.quickOpen"</span>,</span><br><span class="line"><span class="string">"workbench.action.quickOpenView"</span>,</span><br><span class="line"><span class="string">"workbench.action.showCommands"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.clear"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.copySelection"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.deleteWordLeft"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.deleteWordRight"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.findWidget.history.showNext"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.findWidget.history.showPrevious"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focus"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex1"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex2"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex3"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex4"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex5"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex6"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex7"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex8"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusAtIndex9"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusFindWidget"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusNext"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.focusPrevious"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.hideFindWidget"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.kill"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.new"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.paste"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.runActiveFile"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.runSelectedText"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.scrollDown"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.scrollDownPage"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.scrollToBottom"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.scrollToTop"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.scrollUp"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.scrollUpPage"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.selectAll"</span>,</span><br><span class="line"><span class="string">"workbench.action.terminal.toggleTerminal"</span>,</span><br><span class="line"><span class="string">"workbench.action.togglePanel"</span></span><br></pre></td></tr></table></figure></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ol><li><p>编辑<code>package.json</code>在 contribute 属性内添加 configuration 属性</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"configuration": &#123;</span><br><span class="line">    "type": "object",</span><br><span class="line">    "title": "ppyy", // 显示名称</span><br><span class="line">    "properties": &#123;</span><br><span class="line">    "ppyy.port": &#123;</span><br><span class="line">        "type": "number", // string,array,number 类型</span><br><span class="line">        "default": 5566,</span><br><span class="line">        "description": "Communication with ppyy-term`s socket server bind port",</span><br><span class="line">        "scope": "resource"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>extension.ts</code>中使用 sayHello 命令获取配置属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.subscriptions.push(vscode.commands.registerCommand(<span class="string">'extension.sayHello'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> ppyyVscodeConfig = vscode.workspace.getConfiguration(<span class="string">'ppyy'</span>) <span class="comment">// 这个参数就是配置的前缀</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(ppyyVscodeConfig))</span><br><span class="line">    vscode.window.showInformationMessage(<span class="string">'Hello World'</span>)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ol><p>然后在编辑源码的 vscode 窗口的调试控制台将会输出<code>{&quot;port&quot;:5566}</code></p><ol><li>使用 Open Workspace Settings 命令打开设置编辑页面，对应的命令参数是<code>workbench.action.openWorkspaceSettings</code></li></ol><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><ol><li><p>在<code>package.json</code> 的 contribute 属性中添加 menus </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"menus": &#123;</span><br><span class="line">    "editor/context": [&#123; // 编辑器编辑内容内右键菜单呈现</span><br><span class="line">    "when": "resourceLangId == python", // 当符合条件的时候菜单才生效</span><br><span class="line">    "command": "extension.sayHello",</span><br><span class="line">    "alt": "resourceLangId == lua", // 折这条件</span><br><span class="line">    "group": "hello" // 菜单上下文的分组 默认有navigation </span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>菜单上下文参考<br><a href="https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesmenus" target="_blank" rel="noopener">https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesmenus</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">The global Command Palette - commandPalette</span><br><span class="line">The Explorer context menu - explorer/context 左侧文件树</span><br><span class="line">The editor context menu - editor/context 编辑器内容</span><br><span class="line">The editor title menu bar - editor/title 编辑器左侧...菜单</span><br><span class="line">The editor title context menu - editor/title/context  文件标题菜单</span><br><span class="line">The debug callstack view context menu - debug/callstack/context</span><br><span class="line">The SCM title menu - scm/title</span><br><span class="line">SCM resource groups menus - scm/resourceGroup/context</span><br><span class="line">SCM resources menus - scm/resource/context</span><br><span class="line">The View title menu - view/title 左侧视图标题</span><br><span class="line">The View item menu - view/item/context</span><br></pre></td></tr></table></figure></li><li><p>菜单生效条件参考<br><a href="https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts" target="_blank" rel="noopener">https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts</a><br>有常见的一下情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resourceLangId 当前编辑的文件语言，如 resourceLangId == lua</span><br><span class="line">resourceFilename文件名</span><br></pre></td></tr></table></figure></li></ol><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><p>// TODO</p><h3 id="状态栏栏目"><a href="#状态栏栏目" class="headerlink" title="状态栏栏目"></a>状态栏栏目</h3><ol><li><p>创建一个状态栏目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> item = vscode.window.createStatusBarIetm(StatusBarAlignment.LEFT, <span class="number">100</span>) <span class="comment">// 数值越大越靠边</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item.show() <span class="comment">// 显示</span></span><br><span class="line">item.hide() <span class="comment">// 隐藏</span></span><br><span class="line">item.despose() <span class="comment">// 释放</span></span><br></pre></td></tr></table></figure></li><li><p>变更他的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item.text = <span class="string">'lala'</span> <span class="comment">// 修改显示文字</span></span><br><span class="line">item.color = <span class="string">'red'</span> <span class="comment">// 修改颜色</span></span><br><span class="line">item.tooltip = <span class="string">'help me'</span> <span class="comment">// 指针停留显示的提示信息</span></span><br></pre></td></tr></table></figure></li><li><p>使用图标<br>支持使用<code>$()</code>语法来显示 [GitHub Octicon] (<a href="https://octicons.github.com/" target="_blank" rel="noopener">https://octicons.github.com/</a>) 图标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item.text = <span class="string">'$(pulse) haha'</span> <span class="comment">// 链接连接</span></span><br><span class="line">item.text = <span class="string">'$(repo-force-push) 100%'</span>  <span class="comment">// 强推</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;h3 id=&quot;安装生成器&quot;&gt;&lt;a href=&quot;#安装生成器&quot; class=&quot;headerlink&quot; title=&quot;安装生成器&quot;&gt;
      
    
    </summary>
    
      <category term="Javascript" scheme="https://zh-h.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://zh-h.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin objct 单例与反编译探究</title>
    <link href="https://zh-h.github.io/2017/10/25/2017/10/25/decomplie-kotlin-and-inspect-object-type/"/>
    <id>https://zh-h.github.io/2017/10/25/2017/10/25/decomplie-kotlin-and-inspect-object-type/</id>
    <published>2017-10-24T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.153Z</updated>
    
    <content type="html"><![CDATA[<p>对 Kotlin 单例模式的语法糖感兴趣，了解一下怎么实现对应的 Java 如何实现最优化。</p><p>Java 单例模式参考 <a href="常见 Java 单例模式的实现">http://applehater.cn/2016/09/20/75/</a></p><h2 id="object-对象表达式"><a href="#object-对象表达式" class="headerlink" title="object 对象表达式"></a>object 对象表达式</h2><p>使用 Kotlin 的 object 对象表达式可以很方便创建一个单例模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">object cat &#123;</span><br><span class="line">    fun say() &#123;</span><br><span class="line">        println(&quot;meow~&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    cat.say() // 直接使用对象名称访问</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对象表达式在我们使用的地方立即初始化并执行的。</p><p>对象声明是懒加载的，是在我们第一次访问时初始化的。</p><h3 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public final class cat &#123;</span><br><span class="line">   public static final cat INSTANCE;</span><br><span class="line"></span><br><span class="line">   public final void say() &#123;</span><br><span class="line">      String var1 = &quot;meow~&quot;;</span><br><span class="line">      System.out.println(var1);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private cat() &#123;</span><br><span class="line">      INSTANCE = (cat)this;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   static &#123;</span><br><span class="line">      new cat();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final class The_object_typeKt &#123;</span><br><span class="line">   public static final void main(@NotNull String[] args) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(args, &quot;args&quot;);</span><br><span class="line">      cat.INSTANCE.say();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见对象表达式使用了静态代码块构造的单例模式，静态代码块是在类初始化的时候进行的，而不像静态成员变量在类装载的时候就行初始化，可以实现延迟加载；利用 JVM 静态代码初始化的特性，可以实现同步的单例模式。</p><h2 id="companion-object-伴随对象"><a href="#companion-object-伴随对象" class="headerlink" title="companion object 伴随对象"></a>companion object 伴随对象</h2><p>Kotlin 没有提供静态方法，使用伴随对象可以获得近似静态成员访问的效果，但是实际上仍然是真正的成员实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class AnimalProtectionOrganization&#123;</span><br><span class="line">    fun say()&#123;</span><br><span class="line">        println(&quot;protect!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog&#123;</span><br><span class="line">    companion object &#123;</span><br><span class="line">        val APO = AnimalProtectionOrganization()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    Dog.APO.say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伴随对象在对应的类加载初始化，和静态变量的机制类似。</p><h3 id="Java-实现-1"><a href="#Java-实现-1" class="headerlink" title="Java 实现"></a>Java 实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public final class Dog &#123;</span><br><span class="line">   @NotNull</span><br><span class="line">   private static final AnimalProtectionOrganization APO = new AnimalProtectionOrganization();</span><br><span class="line">   public static final Dog.Companion Companion = new Dog.Companion((DefaultConstructorMarker)null);</span><br><span class="line"></span><br><span class="line">   public static final class Companion &#123;</span><br><span class="line">      @NotNull</span><br><span class="line">      public final AnimalProtectionOrganization getAPO() &#123;</span><br><span class="line">         return Dog.APO;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      private Companion() &#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // $FF: synthetic method</span><br><span class="line">      public Companion(DefaultConstructorMarker $constructor_marker) &#123;</span><br><span class="line">         this();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final class The_object_typeKt &#123;</span><br><span class="line">    public static final void main(@NotNull String[] args) &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(args, &quot;args&quot;);</span><br><span class="line">        Dog.Companion.getAPO().say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了内部嵌套类实现单例模式。</p><h2 id="Kotlin-反编译为-Java-源码"><a href="#Kotlin-反编译为-Java-源码" class="headerlink" title="Kotlin 反编译为 Java 源码"></a>Kotlin 反编译为 Java 源码</h2><ol><li><p>使用IntelliJ IDEA 打开制定的 Kotlin 文件(需安装Kotlin插件)；</p></li><li><p>使用 Tools -&gt; Kotlin -&gt; Show Kotlin Bytecode；</p><p> <img src="http://wx4.sinaimg.cn/large/e7c91439gy1filpinehauj20k80dsjsh.jpg" alt="show kotlin bytecode"></p></li><li><p>使用 decompile 将 JVM 字节码转换为对应的 Java 源码；</p><p> <img src="http://wx3.sinaimg.cn/large/e7c91439gy1filpimjiaoj20k80cfdgm.jpg" alt="decomplie bytecode to java"></p></li><li><p>然后你就可以探究一下 Kotlin 的语法糖是怎么在 Java 中实现。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对 Kotlin 单例模式的语法糖感兴趣，了解一下怎么实现对应的 Java 如何实现最优化。&lt;/p&gt;
&lt;p&gt;Java 单例模式参考 &lt;a href=&quot;常见 Java 单例模式的实现&quot;&gt;http://applehater.cn/2016/09/20/75/&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://zh-h.github.io/tags/Java/"/>
    
      <category term="Kotlin" scheme="https://zh-h.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>NodeMCU with MicroPython</title>
    <link href="https://zh-h.github.io/2017/10/19/2017/10/19/NodeMCU/"/>
    <id>https://zh-h.github.io/2017/10/19/2017/10/19/NodeMCU/</id>
    <published>2017-10-18T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刷入固件"><a href="#刷入固件" class="headerlink" title="刷入固件"></a>刷入固件</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>使用 USB 连接 NodeMCU 到 PC</li><li>下载 MicroPython for ESP8266 的固件</li><li>下载安装 CP210x_Windows_Drivers</li><li>使用 pip 安装 esptool 和 ampy</li></ol><h3 id="擦除Flash"><a href="#擦除Flash" class="headerlink" title="擦除Flash"></a>擦除Flash</h3><ol><li>在设备管理器中找到串口连接串口号（比如 COM3）</li><li>运行<code>esptool.py --port COM3 erase_flash</code>把先前固件的数据都删掉，防止出现一些问题<br>运行正确的话输出如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ esptool.py --port COM3 erase_flash</span><br><span class="line">esptool.py v2.1</span><br><span class="line">Connecting....</span><br><span class="line">Detecting chip <span class="built_in">type</span>... ESP8266</span><br><span class="line">Chip is ESP8266</span><br><span class="line">Uploading stub...</span><br><span class="line">Running stub...</span><br><span class="line">Stub running...</span><br><span class="line">Erasing flash (this may take a <span class="keyword">while</span>)...</span><br><span class="line">Chip erase completed successfully <span class="keyword">in</span> 10.6s</span><br><span class="line">Hard resetting...</span><br></pre></td></tr></table></figure></li></ol><h3 id="刷入"><a href="#刷入" class="headerlink" title="刷入"></a>刷入</h3><ol><li><p>运行<code>esptool.py --port COM3 write_flash -fm qio 0x00000 esp8266-20170823-v1.9.2.bin</code><br>默认的<code>-fm</code>写入模式是<code>dio</code>对于大于 4M 的 Flash 会有更好的兼容，但是速率受限。</p><blockquote><p>multi I/O SPI设备是有从单一设备支持增加带宽或throughput的能力。相对于标准的串行Flash存储设备，一个dual I/O接口能够使能双倍的速率。quad I/O接口能提升throughput四次。</p></blockquote></li><li><p>运行成功的输出如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ esptool.py --port COM3 write_flash -fm qio 0x00000 esp8266-20170823-v1.9.2.bin</span><br><span class="line">8266-20170823-v1.9.2.bin</span><br><span class="line">esptool.py v2.1</span><br><span class="line">Connecting....</span><br><span class="line">Detecting chip <span class="built_in">type</span>... ESP8266</span><br><span class="line">Chip is ESP8266</span><br><span class="line">Uploading stub...</span><br><span class="line">Running stub...</span><br><span class="line">Stub running...</span><br><span class="line">Configuring flash size...</span><br><span class="line">Auto-detected Flash size: 4MB</span><br><span class="line">Flash params <span class="built_in">set</span> to 0x0240</span><br><span class="line">Compressed 601136 bytes to 392067...</span><br><span class="line">Wrote 601136 bytes (392067 compressed) at 0x00000000 <span class="keyword">in</span> 34.7 seconds (effective 138.7 kbit/s)...</span><br><span class="line">Hash of data verified.</span><br><span class="line"></span><br><span class="line">Leaving...</span><br><span class="line">Hard resetting...</span><br></pre></td></tr></table></figure></li><li><p>按下板子的 RST 键重启</p></li></ol><h2 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h2><blockquote><p>REPL — 交互式解释器环境。<br>R(read)、E(evaluate)、P(print)、L(loop)<br>输入值，交互式解释器会读取输入内容并对它求值，再返回结果，并重复此过程。</p></blockquote><p>Micropython 提供REPL，但是为了能够人机交互，需要其他的软件接收信号发送给开发板。</p><h3 id="putty"><a href="#putty" class="headerlink" title="putty"></a>putty</h3><ol><li>设置串口号和波特率</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/e7c91439ly1fknxp6kjmqj20ck0c5myu.jpg" alt="设置串口号和波特率" title="">                </div>                <div class="image-caption">设置串口号和波特率</div>            </figure><ol><li>设置其他参数</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx2.sinaimg.cn/large/e7c91439ly1fknxp6h5s0j20ck0c5t9y.jpg" alt="设置其他参数" title="">                </div>                <div class="image-caption">设置其他参数</div>            </figure><ol><li>打开连接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l▒<span class="string">"rdr<span class="variable">$r</span>▒n▒▒▒▒▒oܟ▒▒#r▒▒b쏜#$▒#$▒▒l#$▒▒ln▒p&#123;l▒l▒▒|▒▒▒#4 ets_task(40100164, 3, 3fff837c, 4)</span></span><br><span class="line"><span class="string">OSError: [Errno 2] ENOENT</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MicroPython v1.9.2-8-gbf8f45cf on 2017-08-23; ESP module with ESP8266</span></span><br><span class="line"><span class="string">Type "</span><span class="built_in">help</span>()<span class="string">" for more information.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; help()</span></span><br><span class="line"><span class="string">Welcome to MicroPython!</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="ampy"><a href="#ampy" class="headerlink" title="ampy"></a>ampy</h3><p>Adafruit MicroPython Tool 通过串口连接 MicroPython 单板的的工具，支持获取、罗列、删除、提交文件以及运行脚本的功能。</p><ol><li>运行<code>ampy --port COM3 get boot.py</code>获取<code>boot.py</code>的内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ampy --port COM3 get boot.py</span><br><span class="line"># This file is executed on every boot (including wake-boot from deepsleep)</span><br><span class="line">#import esp</span><br><span class="line">#esp.osdebug(None)</span><br><span class="line">import gc</span><br><span class="line">#import webrepl</span><br><span class="line">#webrepl.start()</span><br><span class="line">gc.collect()</span><br></pre></td></tr></table></figure></li></ol><p>或者设置终端的环境变量<code>export AMPY_PORT=COM3</code>(Windows CMD: set AMPY_PORT=COM3)指定端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ampy get boot.py</span><br></pre></td></tr></table></figure></p><h3 id="node-serialport"><a href="#node-serialport" class="headerlink" title="node-serialport"></a>node-serialport</h3><p>一个 Node.js 库，支持Linux、Windows和MacOS，使用 Javascript 事件驱动编程，支持命令行打开模拟终端连接串口</p><ol><li><p>罗列所有串口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt;serialport-term.cmd</span><br><span class="line">COM3    USB\VID_10C4&amp;PID_EA60\0001      Silicon Labs</span><br></pre></td></tr></table></figure></li><li><p>进入终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt;serialport-term.cmd -p COM3 -b 115200</span><br><span class="line">l▒<span class="string">"rdr<span class="variable">$r</span>▒n▒▒▒▒▒oܟ▒▒#r▒▒b쏜#$▒#$▒▒l#$▒▒ln▒p&#123;l▒l▒▒|▒▒▒#4 ets_task(40100164, 3, 3fff837c, 4)</span></span><br><span class="line"><span class="string">OSError: [Errno 2] ENOENT</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MicroPython v1.9.2-8-gbf8f45cf on 2017-08-23; ESP module with ESP8266</span></span><br><span class="line"><span class="string">Type "</span><span class="built_in">help</span>()<span class="string">" for more information.</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="使用-MicroPython-进行编程"><a href="#使用-MicroPython-进行编程" class="headerlink" title="使用 MicroPython 进行编程"></a>使用 MicroPython 进行编程</h2><p>// TODO</p><h2 id="串口编程"><a href="#串口编程" class="headerlink" title="串口编程"></a>串口编程</h2><h3 id="使用-node-serialport"><a href="#使用-node-serialport" class="headerlink" title="使用 node-serialport"></a>使用 node-serialport</h3><ol><li>使用<code>process.stdin.setRawMod(true)</code>获取所有按键输入，包括控制按键等,实现串口连接的模拟<a href="#REPL">终端</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PORT_NAME = <span class="string">'COM3'</span></span><br><span class="line"><span class="keyword">const</span> BAUD_RATE = <span class="number">115200</span> <span class="comment">// config those</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>)</span><br><span class="line"><span class="keyword">const</span> SerialPort = <span class="built_in">require</span>(<span class="string">'serialport'</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="keyword">new</span> SerialPort(PORT_NAME, &#123;</span><br><span class="line">    baudRate: <span class="number">115200</span>,</span><br><span class="line">    autoOpen: <span class="literal">false</span>,</span><br><span class="line">    rtscts: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> itOut = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    process.stdout.write(data.toString())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> itError = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    process.stdout.write(data.toString())</span><br><span class="line">&#125;</span><br><span class="line">port.open(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    port.write(<span class="string">'import os;os.listdir()\r'</span>) <span class="comment">// '\r' is return means next line, in Windows is '\r\n'</span></span><br><span class="line"></span><br><span class="line">    port.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">        itError(err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    port.on(<span class="string">'end'</span>, (s) =&gt; &#123;</span><br><span class="line">        port.flush()</span><br><span class="line">        port.close();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    port.on(<span class="string">'readable'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        itOut(port.read())</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    process.stdin.setRawMode(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">let</span> exitCounter = <span class="number">0</span></span><br><span class="line">    process.stdin.on(<span class="string">'data'</span>, (s) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] === <span class="number">0x03</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exitCounter == <span class="number">1</span>) &#123;</span><br><span class="line">                itOut(<span class="string">'bye\n'</span>)</span><br><span class="line">                port.close();</span><br><span class="line">                process.exit(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                itOut(<span class="string">'Wanna exit? ctrl+c continue.\n'</span>)</span><br><span class="line">                port.write(s)  <span class="comment">// ctrl+c 终止当前运行的程序</span></span><br><span class="line">                exitCounter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            exitCounter = <span class="number">0</span></span><br><span class="line">            port.write(s)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] === <span class="number">0x0d</span>) &#123;</span><br><span class="line">            itOut(<span class="string">'\n'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="non-blocking-input-raw-input"><a href="#non-blocking-input-raw-input" class="headerlink" title="non-blocking input | raw input"></a>non-blocking input | raw input</h2><p><strong>类似 node.js process.stdin.setRawMode(true) 的操作</strong>，不需要回车，获取所有包括ctrl+B等不可见字符</p><ul><li>Python<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考 Django createsuperuser 的时候输入密码的功能</span></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Getcher</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__getch = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> platform.system() == <span class="string">'Windows'</span>:</span><br><span class="line">            <span class="keyword">import</span> msvcrt</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">getch_func</span><span class="params">()</span>:</span></span><br><span class="line">                <span class="keyword">return</span> int.from_bytes(msvcrt.getch(), byteorder=<span class="string">'little'</span>)</span><br><span class="line">            self.__getch = getch_func</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">getch_func_cursor</span><span class="params">()</span>:</span></span><br><span class="line">                <span class="keyword">import</span> curses</span><br><span class="line"></span><br><span class="line">                window = curses.initscr()</span><br><span class="line">                curses.noecho()</span><br><span class="line">                window.keypad(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">def</span> <span class="title">getch_func</span><span class="params">()</span>:</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        stdout.write(<span class="string">'\r'</span>)  <span class="comment"># return line first position</span></span><br><span class="line">                        key = window.getch()</span><br><span class="line">                        <span class="keyword">return</span> key</span><br><span class="line">                    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                        curses.endwin()</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">                    <span class="keyword">except</span> Exception:</span><br><span class="line">                        curses.endwin()</span><br><span class="line">                <span class="keyword">return</span> getch_func</span><br><span class="line"></span><br><span class="line">            self.__getch = getch_func_cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getch</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__getch()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = Getcher()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    k = g.getch()</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">3</span>:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    print(chr(k))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;刷入固件&quot;&gt;&lt;a href=&quot;#刷入固件&quot; class=&quot;headerlink&quot; title=&quot;刷入固件&quot;&gt;&lt;/a&gt;刷入固件&lt;/h2&gt;&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h
      
    
    </summary>
    
      <category term="Linux" scheme="https://zh-h.github.io/categories/Linux/"/>
    
    
      <category term="python" scheme="https://zh-h.github.io/tags/python/"/>
    
      <category term="IoT" scheme="https://zh-h.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 内嵌 tomcat 调优</title>
    <link href="https://zh-h.github.io/2017/10/14/2017/10/14/spring-boot-embedded-tomcat-tunning/"/>
    <id>https://zh-h.github.io/2017/10/14/2017/10/14/spring-boot-embedded-tomcat-tunning/</id>
    <published>2017-10-13T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了能够承受更多的用户量，并且改善性能，需要对 Sevlet 容器的最大连接数、最大线程数、IO模式进行设置。</p><h2 id="外部-Tomcat-参数调优"><a href="#外部-Tomcat-参数调优" class="headerlink" title="外部 Tomcat 参数调优"></a>外部 Tomcat 参数调优</h2><p>略。</p><h2 id="Spring-Boot-内嵌-tomcat-参数调优"><a href="#Spring-Boot-内嵌-tomcat-参数调优" class="headerlink" title="Spring Boot 内嵌 tomcat 参数调优"></a>Spring Boot 内嵌 tomcat 参数调优</h2><p>面试被问到达这个问题，一般都是使用默认参数，还没有实际调整的经验，于是回答了 JVM 的命令行参数。。。</p><h3 id="Spring-Boot-配置属性"><a href="#Spring-Boot-配置属性" class="headerlink" title="Spring Boot 配置属性"></a>Spring Boot 配置属性</h3><p>以下是默认的 Tomcat 容器在 Spring Boot 中的配置属性</p><p><code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to</span><br><span class="line">the tomcat base dir or absolute.</span><br><span class="line">server.tomcat.accesslog.enabled=false # Enable access log.</span><br><span class="line">server.tomcat.accesslog.pattern=common # Format pattern for access logs.</span><br><span class="line">server.tomcat.accesslog.prefix=access_log # Log file name prefix.</span><br><span class="line">server.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in the file name</span><br><span class="line">until rotate time.</span><br><span class="line">server.tomcat.accesslog.request-attributes-enabled=false # Set request attributes for IP address,</span><br><span class="line">Hostname, protocol and port used for the request.</span><br><span class="line">server.tomcat.accesslog.suffix=.log # Log file name suffix.</span><br><span class="line">server.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of</span><br><span class="line">backgroundProcess methods.</span><br><span class="line">server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.</span><br><span class="line">server.tomcat.internal-proxies=10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125; # regular expression matching trusted IP addresses.</span><br><span class="line">server.tomcat.max-threads=0 # Maximum amount of worker threads. 最大线程数</span><br><span class="line">server.tomcat.min-spare-threads=0 # Minimum amount of worker threads. 最小线程数</span><br><span class="line">server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port</span><br><span class="line">value.</span><br><span class="line">server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named &quot;X-ForwardedProto&quot;.</span><br><span class="line">server.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the</span><br><span class="line">incoming request uses SSL.</span><br><span class="line">server.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by</span><br><span class="line">appending a / to the path.</span><br><span class="line">server.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For</span><br><span class="line">instance `X-FORWARDED-FOR`</span><br><span class="line">server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.</span><br></pre></td></tr></table></figure><p>我们能从中进行调整的主要是<code>max-threads</code>和<code>min-spare-threads</code>两个参数。</p><h3 id="TomcatEmbeddedServletContainerFactory"><a href="#TomcatEmbeddedServletContainerFactory" class="headerlink" title="TomcatEmbeddedServletContainerFactory"></a>TomcatEmbeddedServletContainerFactory</h3><p>但是我们需要设置 Tomcat 的最大连接数呢？不像独立的 Tomcat 可以配置<code>server.xml</code>文件，Spring Boot 内置的 Tomcat 支持使用 Java 编码进行配置，可以重写<code>TomcatEmbeddedServletContainerFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.zonghua.tomcat.tunning;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11NioProtocol;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEmbeddedServletContainerFactory</span> <span class="keyword">extends</span> <span class="title">TomcatEmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CustomEmbeddedServletContainerFactory.class.getName());</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.tomcat.max-connections&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer maxConnections = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeConnector</span><span class="params">(Connector connector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.customizeConnector(connector);</span><br><span class="line">        <span class="keyword">super</span>.customizeConnector(connector);</span><br><span class="line">        Http11NioProtocol protocol = (Http11NioProtocol) connector.getProtocolHandler();</span><br><span class="line">        protocol.setMaxConnections(maxConnections);  <span class="comment">//设置最大连接数,请他参数请参考 protocol 的属性</span></span><br><span class="line">        LOGGER.info(<span class="string">"Embedded tomcat max connections set: "</span> + maxConnections);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是可以支持更改的属性：</p><ol><li><p>maxConnections: 这个值表示最多可以有多少个socket连接到tomcat上。NIO模式下默认是10000.</p></li><li><p>maxThreads： Tomcat使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数。默认值150。</p></li><li><p>acceptCount： 指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理。默认值10。</p></li><li><p>minSpareThreads： Tomcat初始化时创建的线程数。默认值25。</p></li><li><p>maxSpareThreads： 一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。默认值75。</p></li><li><p>enableLookups： 是否反查域名，默认值为true。为了提高处理能力，应设置为false</p></li><li><p>connnectionTimeout： 网络连接超时，默认值60000，单位：毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。</p></li><li><p>maxKeepAliveRequests： 保持请求数量，默认值100。 bufferSize： 输入流缓冲大小，默认值2048 bytes。</p></li><li><p>compression： 压缩传输，取值on/off/force，默认值off。 其中和最大连接数相关的参数为maxThreads和acceptCount。如果要加大并发连接数，应同时加大这两个参数。</p></li></ol><h3 id="JVM-参数"><a href="#JVM-参数" class="headerlink" title="JVM 参数"></a>JVM 参数</h3><p>可以使用 Maven 插件指定打包后 jar 运行的默认 JVM 参数。</p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jvmArguments</span>&gt;</span>-Xms512m -Xmx512m -XX:NewSize=64m -XX:MaxNewSize=512m -XX:PermSize=256m<span class="tag">&lt;/<span class="name">jvmArguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JVM 调优是一门玄学，如果掌握后那就是高级工程师了。。。</p><p><a href="https://www.cubrid.org/blog/how-to-tune-java-garbage-collection" target="_blank" rel="noopener">https://www.cubrid.org/blog/how-to-tune-java-garbage-collection</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.cubrid.org/files/attach/images/1730/731/001/117f4cc137a4b953815933dcd51f481b.png" alt="tomcat tunning" title="">                </div>                <div class="image-caption">tomcat tunning</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了能够承受更多的用户量，并且改善性能，需要对 Sevlet 容器的最大连接数、最大线程数、IO模式进行设置。&lt;/p&gt;
&lt;h2 id=&quot;外部
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="Spring" scheme="https://zh-h.github.io/tags/Spring/"/>
    
      <category term="Tomcat" scheme="https://zh-h.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 的一些使用技巧</title>
    <link href="https://zh-h.github.io/2017/10/04/2017/10/4/using-java8/"/>
    <id>https://zh-h.github.io/2017/10/04/2017/10/4/using-java8/</id>
    <published>2017-10-03T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.153Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8 发布三年后，今年年底将要发布 Java 9。然而对于很多使用者来说，受限与旧项目的稳定性考虑以及框架封装隐藏底层 API，很多 Java 8 的特性都没有使用上。</p><p>刚刚受封为 Android 官方语言的 Kotlin 似乎热潮已经冷却，虽然 Kotlin 有着甜蜜蜜的语法糖，但是表面易用的语法实际上却埋下了很多坑（<a href="https://blog.kotliner.cn/2017/07/30/KotlinKoans-02-Java-Kotlin-Conversion/" target="_blank" rel="noopener">解毒 Kotlin Koans: 02 震惊！你的 Java 代码居然被转换成了这样…</a>），上线使用还要做很多深入学习。</p><p>为了迎接 Java 9，还是先把 Java 8 用熟。。。</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>以往为了读取一个文本文件的内容可能需要需要十几行代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readTranslateJsonFileToString</span><span class="params">(String resourceName)</span> </span>&#123;</span><br><span class="line">    ClassLoader classLoader = LocationTranslateUtil.class.getClassLoader();</span><br><span class="line">    URL resource = classLoader.getResource(resourceName);</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(resource.getFile());</span><br><span class="line">        InputStream is;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is, <span class="string">"UTF-8"</span>);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            String temp;</span><br><span class="line">            <span class="keyword">while</span> ((temp = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                content.append(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>java.nio.*</code> 缩短为四行，读取类路径中的文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readPropertiesStr</span><span class="params">()</span> <span class="keyword">throws</span> IOException, URISyntaxException</span>&#123;</span><br><span class="line">    ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">    URL resource = classLoader.getResource(<span class="string">"config.properties"</span>);</span><br><span class="line">    Path path = Paths.get(resource.toURI());</span><br><span class="line">    <span class="keyword">byte</span>[] data = Files.readAllBytes(path);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(data, StandardCharsets.UTF_8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h2><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter df = DateTimeFormatter.ISO_LOCAL_DATE_TIME; <span class="comment">// 线程安全</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDateTimeString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime now = LocalDateTime.now();</span><br><span class="line">    <span class="keyword">return</span> df.format(now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">parseToLocalDateTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.parse(<span class="string">"2017-08-14T12:49:44.133"</span>, df);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增的 <code>DateTimeFormatter</code> 是不可变，而且是线程安全的类，因此可以直接使用在成员变量中。</p><h3 id="明天，去年"><a href="#明天，去年" class="headerlink" title="明天，去年"></a>明天，去年</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">nextDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().plusDays(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">previousYear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().minusYears(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间差"><a href="#时间差" class="headerlink" title="时间差"></a>时间差</h3><p>快速计算两个本地时间的时间差，包括<code>NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS, HALF_DAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA, ERAS</code> 时间单位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public long differDates() &#123;</span><br><span class="line">    for(ChronoUnit unit : ChronoUnit.values())&#123;</span><br><span class="line">        System.out.println(unit.name());</span><br><span class="line">    &#125;</span><br><span class="line">    return ChronoUnit.DAYS.between(previousYear(),LocalDateTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="早晚"><a href="#早晚" class="headerlink" title="早晚"></a>早晚</h3><p>比较两个日期/时间的早晚，可以使用<code>isAfter</code>或者<code>isBefore</code> 方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate tomorrow = LocalDate.of(2017, 8, 15);</span><br><span class="line">if(tommorow.isAfter(LocalDate.now()))&#123;</span><br><span class="line">    System.out.println(&quot;Tomorrow comes after today&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public LocalDateTime utcNow()&#123;</span><br><span class="line">    return LocalDateTime.now(ZoneId.of(&quot;Europe/Berlin&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public Date toOldStyleDate()&#123;</span><br><span class="line">    Instant instance = LocalDateTime.now().atZone(ZoneId.of(&quot;Asia/Shanghai&quot;)).toInstant();</span><br><span class="line">    return Date.from(instance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="默认方法的接口"><a href="#默认方法的接口" class="headerlink" title="默认方法的接口"></a>默认方法的接口</h2><p>Java 8 允许我们使用default关键字，为接口声明添加非抽象的方法实现。这个特性又被称为扩展方法。</p><h3 id="defaut关键字"><a href="#defaut关键字" class="headerlink" title="defaut关键字"></a><code>defaut</code>关键字</h3><p>接口也可以有多个方法实现，使用<code>defaut</code>关键字修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">ping</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">getPinNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMethodInInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        USB usb2_0 = <span class="keyword">new</span> USB() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">ping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(usb2_0.getPinNum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-多继承"><a href="#Java-多继承" class="headerlink" title="Java 多继承"></a>Java 多继承</h3><p>既然接口都可以包含多个方法实现，那么Java本身可以实现多个接口，这样是不是可以实现多继承？</p><p>可以实现Java的多继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">ping</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">getPinNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Plugin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">plug</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"biu"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USB3_0</span> <span class="keyword">implements</span> <span class="title">USB</span>, <span class="title">Plugin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMethodInInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        USB3_0 usb3_0 = <span class="keyword">new</span> USB3_0();</span><br><span class="line">        System.out.println(usb3_0.getPinNum());</span><br><span class="line">        System.out.println(usb3_0.plug());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><p>省略匿名类实现单个方法的接口，直接使用单行表达式或者块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"hua"</span>, <span class="string">"zohar"</span>, <span class="string">"zonghua"</span>);</span><br><span class="line">Collections.sort(names, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123; <span class="comment">// 前者比后者小</span></span><br><span class="line">        System.out.println(o1 + <span class="string">" --- "</span> + o2);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) o1.toCharArray()[<span class="number">0</span>] - (<span class="keyword">int</span>) o2.toCharArray()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法引用 String::compareTo</span></span><br><span class="line">Collections.sort(names, (o1, o2) -&gt; o1.compareTo(o2));</span><br></pre></td></tr></table></figure><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="FunctionalInterface-注解"><a href="#FunctionalInterface-注解" class="headerlink" title="@FunctionalInterface 注解"></a>@FunctionalInterface 注解</h3><p>使用该注解声明一个接口只包含一个抽象方法，但是可以包含多个默认方法实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SomeThing</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheFunctionalInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SomeThing someThing = () -&gt; <span class="string">"lala"</span>;</span><br><span class="line">        System.out.println(someThing.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>可以从类或者实例中获取方法引用，使用<code>::</code>符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"haha"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"66666"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheMethodReference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SomeClass someObject = <span class="keyword">new</span> SomeClass();</span><br><span class="line">        SomeThing someThing = someObject::say;</span><br><span class="line">        SomeThing otherThing = OtherClass::say;</span><br><span class="line">        System.out.println(someThing.say());</span><br><span class="line">        System.out.println(otherThing.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>与匿名类的访问类似，实际上访问外部变量只能是<code>final</code>修饰变量，虽然可以省略，但再次变更变量会导致编译出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lala</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheLambdaContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] name = <span class="keyword">new</span> String[]&#123;<span class="string">"Lily"</span>&#125;;</span><br><span class="line">        Lala lala = () -&gt; name[<span class="number">0</span>] + <span class="string">" hehe"</span>;</span><br><span class="line">        System.out.println(lala.say());</span><br><span class="line"><span class="comment">//        name = new String[]&#123;"What"&#125;; 不可变更引用或者值</span></span><br><span class="line">        lala = () -&gt; &#123;</span><br><span class="line">            name[<span class="number">0</span>] = <span class="string">"Zoar"</span>;</span><br><span class="line">            <span class="keyword">return</span> name[<span class="number">0</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(lala.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内嵌函数式接口"><a href="#内嵌函数式接口" class="headerlink" title="内嵌函数式接口"></a>内嵌函数式接口</h2><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>接收一个传入参数，返回结果，使用默认的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; lala = (str) -&gt; <span class="number">1</span>; <span class="comment">// &lt;input,return&gt;</span></span><br><span class="line">System.out.println(lala.apply(<span class="string">"lala"</span>).addThen(Objects::notNull));</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; hehe = () -&gt; <span class="string">"lala"</span>; <span class="comment">// 没有输入参数</span></span><br><span class="line">System.out.println(hehe.get());</span><br><span class="line"></span><br><span class="line">Consumer&lt;String&gt; whatsUp = (str) -&gt; str = str.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">String someThing = <span class="string">"lala"</span>;</span><br><span class="line">whatsUp.accept(someThing);</span><br><span class="line">System.out.println(someThing);</span><br><span class="line"></span><br><span class="line">Comparator&lt;String&gt; strCompare = (o1, o2) -&gt; o1.compareTo(o2); <span class="comment">// 前者比后者大为正</span></span><br><span class="line">System.out.println(strCompare.compare(<span class="string">"a"</span>, <span class="string">"b"</span>));</span><br></pre></td></tr></table></figure><h3 id="Predicates"><a href="#Predicates" class="headerlink" title="Predicates"></a>Predicates</h3><p>传入参数，返回布尔值。具有逻辑方法<code>or</code> <code>and</code> <code>negate</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">predicate.test(<span class="string">"foo"</span>);              <span class="comment">// true</span></span><br><span class="line">predicate.negate().test(<span class="string">"foo"</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;</span><br><span class="line">Predicate&lt;Boolean&gt; isNull = Objects::isNull;</span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; isEmpty = String::isEmpty;</span><br><span class="line">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</span><br></pre></td></tr></table></figure><h3 id="Suppliers"><a href="#Suppliers" class="headerlink" title="Suppliers"></a>Suppliers</h3><p>没有传入参数，返回给定类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;String&gt; hehe = () -&gt; <span class="string">"lala"</span>; <span class="comment">// 没有输入参数</span></span><br><span class="line">System.out.println(hehe.get());</span><br></pre></td></tr></table></figure><h3 id="Consumers"><a href="#Consumers" class="headerlink" title="Consumers"></a>Consumers</h3><p>没有返回参数，给定输入类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; whatsUp = (str) -&gt; str = str.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">String someThing = <span class="string">"lala"</span>;</span><br><span class="line">whatsUp.accept(someThing);</span><br><span class="line">System.out.println(someThing);</span><br></pre></td></tr></table></figure><h3 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h3><p>对比两个传入参数，左边的比右边的大就返回正值，反则负值，相等为0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;String&gt; strCompare = (o1, o2) -&gt; o1.compareTo(o2); <span class="comment">// 前者比后者大为正</span></span><br><span class="line">System.out.println(strCompare.compare(<span class="string">"a"</span>, <span class="string">"b"</span>));</span><br></pre></td></tr></table></figure><h3 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h3><p>一个存储结果的容器，用来省掉函数过程中的<code>if xx != null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">"lala"</span>);</span><br><span class="line"></span><br><span class="line">optional.isPresent();           <span class="comment">// true</span></span><br><span class="line">optional.get();                 <span class="comment">// "lala"</span></span><br><span class="line">optional.orElse(<span class="string">"hehe"</span>);    <span class="comment">// "lala"</span></span><br><span class="line"></span><br><span class="line">optional.ifPresent((s) -&gt; System.out.println(s.charAt(<span class="number">0</span>)));     <span class="comment">// "l"</span></span><br></pre></td></tr></table></figure><h2 id="流处理"><a href="#流处理" class="headerlink" title="流处理"></a>流处理</h2><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>过滤掉集合中的某些元素，传入参数是元素，返回过滤判断的布尔值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names.stream()</span><br><span class="line">        .filter(Objects::nonNull)</span><br><span class="line">        .map(String::toUpperCase)</span><br><span class="line">        .sorted(((o1, o2) -&gt; -o1.compareTo(o2)))</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="Sorted"><a href="#Sorted" class="headerlink" title="Sorted"></a>Sorted</h3><p>传入前后两个参数，返回两者判断的有符号整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names.stream()</span><br><span class="line">        .filter(Objects::nonNull)</span><br><span class="line">        .map(String::toUpperCase)</span><br><span class="line">        .sorted(((o1, o2) -&gt; -o1.compareTo(o2)))</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>原来集合的顺序并不会被改变</strong></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>传入一个元素，处理后返回这个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names.stream()</span><br><span class="line">        .filter(Objects::nonNull)</span><br><span class="line">        .map(String::toUpperCase)</span><br><span class="line">        .sorted(((o1, o2) -&gt; -o1.compareTo(o2)))</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h3><p>在集合中查找匹配的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> hasStartWith0 = names.stream()</span><br><span class="line">                .anyMatch((s) -&gt; s.startsWith(<span class="string">"0"</span>));</span><br><span class="line">        System.out.println(hasStartWith0);</span><br></pre></td></tr></table></figure><h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h3><p>传入最终元素、每个元素，把每个元素处理到最终的元素中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; namesStr = names.stream()</span><br><span class="line">        .filter(TheStreams::nonNull)</span><br><span class="line">        .reduce((o1, o2) -&gt; &#123;</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> o1 + <span class="string">" - "</span> + o2;</span><br><span class="line">        &#125;); <span class="comment">// 最终元素,每个元素</span></span><br><span class="line">namesStr.ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h3><p>计算集合中的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = names.stream()</span><br><span class="line">        .filter(TheStreams::nonNull)</span><br><span class="line">        .filter((s) -&gt; s.startsWith(<span class="string">"0"</span>) || s.startsWith(<span class="string">"L"</span>))</span><br><span class="line">        .count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><h3 id="并行化"><a href="#并行化" class="headerlink" title="并行化"></a>并行化</h3><p>Java 8 流操作内部封装了多线程调用，可以使用流操作进行并行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">generateRandomNameList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1000000</span>;</span><br><span class="line">    List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;(max);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">        UUID uuid = UUID.randomUUID();</span><br><span class="line">        values.add(uuid.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sequenceSort</span><span class="params">(List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> names.stream()</span><br><span class="line">            .sorted()</span><br><span class="line">            .count(); <span class="comment">// 3s518ms</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">parallelSort</span><span class="params">(List&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> names.parallelStream()</span><br><span class="line">            .sorted()</span><br><span class="line">            .count(); <span class="comment">//2s134ms</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 8 发布三年后，今年年底将要发布 Java 9。然而对于很多使用者来说，受限与旧项目的稳定性考虑以及框架封装隐藏底层 API，很多 Java 8 的特性都没有使用上。&lt;/p&gt;
&lt;p&gt;刚刚受封为 Android 官方语言的 Kotlin 似乎热潮已经冷却，虽然 Ko
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://zh-h.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 注册为 Linux 系统服务</title>
    <link href="https://zh-h.github.io/2017/09/25/2017/09/25/spring-boot-linux-service/"/>
    <id>https://zh-h.github.io/2017/09/25/2017/09/25/spring-boot-linux-service/</id>
    <published>2017-09-24T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>Spring Boot 不需要依赖外部 Servlet 容器，可以直接通过<code>java -jar app.jar</code>的方式执行。</p><p>在一些情况下不适用 Docker 容器管理 Spring Boot 进程的时候，需要使用其他的进程管理工具管理，如<code>systemctl</code>需要编写管理脚本。</p><p>实际上 Maven 插件打包 Spring Boot 的时候可以直接生成管理脚本，然后直接使用服务管理。</p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>Maven 配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Gradle 配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line"></span><br><span class="line">springBoot &#123;</span><br><span class="line">    executable = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建立软链接"><a href="#建立软链接" class="headerlink" title="建立软链接"></a>建立软链接</h2><p>经过打包的可执行脚本被内置在Spring Boot jar包里，链接到<code>/etc/init.d</code>。</p><p>可以将应用安装在/var/myapp, 使用下面命令将Spring Boot应用作为init.d服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x /var/myapp/myapp.jar</span><br><span class="line">ln -s /var/myapp/myapp.jar /etc/init.d/myapp</span><br></pre></td></tr></table></figure><h2 id="管理进程"><a href="#管理进程" class="headerlink" title="管理进程"></a>管理进程</h2><p>注册到到服务后管理进程将十分方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/myapp [start|stop|restart]</span><br></pre></td></tr></table></figure><p>进程的PID在<code>/var/run/myapp/myapp.pid</code></p><p>日志被重定向到<code>/var/log/myapp.log</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务管理&quot;&gt;&lt;a href=&quot;#服务管理&quot; class=&quot;headerlink&quot; title=&quot;服务管理&quot;&gt;&lt;/a&gt;服务管理&lt;/h2&gt;&lt;p&gt;Spring Boot 不需要依赖外部 Servlet 容器，可以直接通过&lt;code&gt;java -jar app.jar&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="https://zh-h.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://zh-h.github.io/tags/Linux/"/>
    
      <category term="Spring" scheme="https://zh-h.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>iPhone Fiddler HTTPS 抓包</title>
    <link href="https://zh-h.github.io/2017/09/19/2017/09/19/ios-fiddler-intercept/"/>
    <id>https://zh-h.github.io/2017/09/19/2017/09/19/ios-fiddler-intercept/</id>
    <published>2017-09-18T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li><p>iOS设备和电脑保证在一个网段内，相互间可联通。</p></li><li><p>下载安装 Fiddler</p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>启动 Fiddler 以下截图为 Windows 平台，其他平台 Fiddler 可做参考。</p><h3 id="解码-HTTPS"><a href="#解码-HTTPS" class="headerlink" title="解码 HTTPS"></a>解码 HTTPS</h3><p>打开 Tool &gt; Options &gt; HTTPS </p><p>设置 Fiddler 解码 HTTPS 内容</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx2.sinaimg.cn/large/e7c91439gy1fjp3iuk3whj20f50a9gm1.jpg" alt="http://wx2.sinaimg.cn/large/e7c91439gy1fjp3iuk3whj20f50a9gm1.jpg" title="">                </div>                <div class="image-caption">http://wx2.sinaimg.cn/large/e7c91439gy1fjp3iuk3whj20f50a9gm1.jpg</div>            </figure><h3 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h3><p>打开 Tool &gt; Options &gt; Connections</p><p>勾选 Allow remote computers to connect</p><h3 id="重启-Fiddler"><a href="#重启-Fiddler" class="headerlink" title="重启 Fiddler"></a>重启 Fiddler</h3><p>重启 Fiddler 代理服务器才会生效</p><p><img src="http://wx1.sinaimg.cn/large/e7c91439gy1fjp3iuj1dzj20f40a8q39.jpg" alt="http://wx1.sinaimg.cn/large/e7c91439gy1fjp3iuj1dzj20f40a8q39.jpg"></p><h3 id="添加代理设置"><a href="#添加代理设置" class="headerlink" title="添加代理设置"></a>添加代理设置</h3><p>查看电脑的内网IP</p><p>打开 iOS 设备的无线局域网 &gt; 代理设置</p><p>填写IP和默认的端口 8888</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx3.sinaimg.cn/large/e7c91439gy1fjp3ivnp9gj20jz0zk40t.jpg" alt="http://wx3.sinaimg.cn/large/e7c91439gy1fjp3ivnp9gj20jz0zk40t.jpg" title="">                </div>                <div class="image-caption">http://wx3.sinaimg.cn/large/e7c91439gy1fjp3ivnp9gj20jz0zk40t.jpg</div>            </figure><p>打开 <a href="http://ip:8888" target="_blank" rel="noopener">http://ip:8888</a></p><p>点击 Fiddler certificate </p><p><img src="http://wx4.sinaimg.cn/large/e7c91439gy1fjp3iws18hj20jz0zkabp.jpg" alt="http://wx4.sinaimg.cn/large/e7c91439gy1fjp3iws18hj20jz0zkabp.jpg"></p><p>安装认证证书</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/e7c91439gy1fjp3iuil1ej20jz0zkgmg.jpg" alt="http://wx4.sinaimg.cn/large/e7c91439gy1fjp3iuil1ej20jz0zkgmg.jpg" title="">                </div>                <div class="image-caption">http://wx4.sinaimg.cn/large/e7c91439gy1fjp3iuil1ej20jz0zkgmg.jpg</div>            </figure><p>打开 iOS 设备的通用 &gt; 关于本机</p><p>使证书可信</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx3.sinaimg.cn/large/e7c91439gy1fjp3iuigvrj20jz0zkgmg.jpg" alt="http://wx3.sinaimg.cn/large/e7c91439gy1fjp3iuigvrj20jz0zkgmg.jpg" title="">                </div>                <div class="image-caption">http://wx3.sinaimg.cn/large/e7c91439gy1fjp3iuigvrj20jz0zkgmg.jpg</div>            </figure><h2 id="示例-访问微信公众号文章阅读数"><a href="#示例-访问微信公众号文章阅读数" class="headerlink" title="示例-访问微信公众号文章阅读数"></a>示例-访问微信公众号文章阅读数</h2><ol><li>打开微信应用，点击访问任意文章</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx3.sinaimg.cn/large/e7c91439gy1fjp447j65bj20jz0zk0uq.jpg" alt="http://wx3.sinaimg.cn/large/e7c91439gy1fjp447j65bj20jz0zk0uq.jpg" title="">                </div>                <div class="image-caption">http://wx3.sinaimg.cn/large/e7c91439gy1fjp447j65bj20jz0zk0uq.jpg</div>            </figure><ol><li><p>检查 Fiddler 左侧回话列表</p></li><li><p>点击带 getappmsgext 的 url</p></li><li><p>右侧面板上面是 HTTP 头部内容</p></li><li><p>右侧面板下部是 HTTP 正文</p></li><li><p>点击 TextView 选项卡</p></li><li><p>点击上面提示的 Response body is encoded, click to decode 提示</p></li><li><p>查看解码后的正文内容</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx4.sinaimg.cn/large/e7c91439gy1fjp3iv3pkxj20im0bt752.jpg" alt="http://wx4.sinaimg.cn/large/e7c91439gy1fjp3iv3pkxj20im0bt752.jpg" title="">                </div>                <div class="image-caption">http://wx4.sinaimg.cn/large/e7c91439gy1fjp3iv3pkxj20im0bt752.jpg</div>            </figure><ol><li>流程</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------+            +------------------+            +------+</span><br><span class="line">|       |            |                  |            |      |</span><br><span class="line">|       |  request   |   intercept      |  request   |      |</span><br><span class="line">|       |  +-----&gt;   |                  |   +----&gt;   |      |</span><br><span class="line">|       |            |   dencrypt       |            |      |</span><br><span class="line">|       |  response  |                  |  response  |      |</span><br><span class="line">|       |  &lt;----+    |   decode         |   &lt;-----+  |      |</span><br><span class="line">|       |            |                  |            |      |</span><br><span class="line">|       |            |   parse          |            |      |</span><br><span class="line">|       |            |                  |            |      |</span><br><span class="line">+-------+            +------------------+            +------+</span><br><span class="line"> iPhone                   Fidder                      Website</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;iOS设备和电脑保证在一个网段内，相互间可联通。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载安装 Fiddle
      
    
    </summary>
    
      <category term="Linux" scheme="https://zh-h.github.io/categories/Linux/"/>
    
    
      <category term="计算机网络" scheme="https://zh-h.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡原理</title>
    <link href="https://zh-h.github.io/2017/08/21/2017/08/21/load-brance/"/>
    <id>https://zh-h.github.io/2017/08/21/2017/08/21/load-brance/</id>
    <published>2017-08-20T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>负载均衡对物理、虚拟服务器或者独立应用进行网络流量的分发，可以包括传输层和应用程的处理。</p><p>负载均衡可以通过流量分发扩展应用系统对外的服务能力，通过消除单点故障提升应用系统的可用性。</p><h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h2><ol><li>Round Robin<br> 对所有可用后端进行循环访问。</li><li>Least Connections(least_conn)<br> 跟踪记录后端的连接数，优先选择链接数少的服务，将请求转发，并且设计每个upstream分配的weight权重信息。</li><li>Least Time(least_time)<br> 请求会分配给响应最快和活跃连接数最少的后端。</li><li>IP Hash(ip_hash)<br> 对请求来源IP地址计算hash值，然后根据得到的hash值通过某种映射分配到后端（Nginx常用）。</li><li>Generic Hash(hash)<br> 以用户自定义资源(比如URL)的方式计算hash值完成分配，其可选consistent关键字支持一致性hash特性；</li></ol><h2 id="常见负载均衡实现"><a href="#常见负载均衡实现" class="headerlink" title="常见负载均衡实现"></a>常见负载均衡实现</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>使用 Nginx 进行负载均有以下特点：</p><ol><li><p>运行在应用层，对HTTP应用进行分流。</p></li><li><p>常用IP hash进行回话绑定。</p></li><li><p>反向代理可以实现缓存。</p></li></ol><p>缺点：</p><ol><li><p>支持的应用协议少，只支持HTTP、HTTPS和WebSocket等。</p></li><li><p>支持应用端口的可用性检查。</p></li></ol><h3 id="Haproxy"><a href="#Haproxy" class="headerlink" title="Haproxy"></a>Haproxy</h3><p>优点：</p><ol><li><p>运行于四层网络，可以进行TCP协议的负载均衡，如数据库的°负载均衡。</p></li><li><p>比其他负载均衡软件高的性能。</p></li></ol><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>通常应用在多地多级房，多运营商网络的负载均衡。</p><h2 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h2><h3 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h3><p>// TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;负载均衡对物理、虚拟服务器或者独立应用进行网络流量的分发，可以包括传输层和应用程的处理。&lt;/p&gt;
&lt;p&gt;负载均衡可以通过流量分发扩展应用系统
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="架构" scheme="https://zh-h.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>并发编程词义</title>
    <link href="https://zh-h.github.io/2017/08/18/2017/08/18/concurrency-programming-01/"/>
    <id>https://zh-h.github.io/2017/08/18/2017/08/18/concurrency-programming-01/</id>
    <published>2017-08-17T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并发-concurrency-与并行-parallelism"><a href="#并发-concurrency-与并行-parallelism" class="headerlink" title="并发 (concurrency) 与并行 (parallelism)"></a>并发 (concurrency) 与并行 (parallelism)</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>两个或多个事件在同一时间间隔发生，微观上串行；</p><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>两个或者多个事件在同一时刻发生，充分利用多核处理器。</p><h2 id="原子性-atomicity-CAS"><a href="#原子性-atomicity-CAS" class="headerlink" title="原子性 (atomicity) (CAS)"></a>原子性 (atomicity) (CAS)</h2><ul><li>原子性不论是多核还是单核，具有原子性的量，同一时刻只能有一个线程来对它进行操作；</li><li>i++ 运算不具有原子性。</li></ul><h2 id="可见性-visibility"><a href="#可见性-visibility" class="headerlink" title="可见性 (visibility)"></a>可见性 (visibility)</h2><p>多个线程对一个共享变量进行操作时，由于编译器或者硬件优化的缘故，a 线程修改了变量的值，但是 b 线程缓存了变量原来的值，读取的就是 cache 中或者寄存器里的数据。(volatile)</p><h2 id="进程、线程和协程"><a href="#进程、线程和协程" class="headerlink" title="进程、线程和协程"></a>进程、线程和协程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>“程序执行的一个实例” ，担当分配系统资源的实体。进程创建必须分配一个完整的独立地址空间；</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程创建的开销主要取决于为线程堆栈的建立而分配内存的开销，这些开销并不大。线程上下文切换发生在两个线程需要同步的时候，比如进入共享数据段，由操作系统进行调度；</p><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>与线程一样共享堆，不共享栈，协程调度切换时，将寄存器上下纹和栈保存起来，协程由程序定义调度(goto)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;并发-concurrency-与并行-parallelism&quot;&gt;&lt;a href=&quot;#并发-concurrency-与并行-parallelism&quot; class=&quot;headerlink&quot; title=&quot;并发 (concurrency) 与并行 (parallelis
      
    
    </summary>
    
      <category term="Java" scheme="https://zh-h.github.io/categories/Java/"/>
    
    
      <category term="Linux" scheme="https://zh-h.github.io/tags/Linux/"/>
    
      <category term="Java" scheme="https://zh-h.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 启用 Base Auth 实现用户认证</title>
    <link href="https://zh-h.github.io/2017/08/13/2017/08/13/nginx-base-auth/"/>
    <id>https://zh-h.github.io/2017/08/13/2017/08/13/nginx-base-auth/</id>
    <published>2017-08-12T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.152Z</updated>
    
    <content type="html"><![CDATA[<p>如果一些 Web 系统（如：Kibana）没有提供用户认证管功能，可以使用 Nginx 反向代理启用 Base Auth。</p><p><strong>Base Auth安全性低，不检验在外网直接使用，请务必添加SSL</strong></p><h2 id="安装-httpd-tools"><a href="#安装-httpd-tools" class="headerlink" title="安装 httpd-tools"></a>安装 httpd-tools</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2-utils</span><br></pre></td></tr></table></figure><h2 id="生成用户密码"><a href="#生成用户密码" class="headerlink" title="生成用户密码"></a>生成用户密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c /etc/nginx/.htpasswd admin</span><br></pre></td></tr></table></figure><h2 id="修改-Nginx-配置"><a href="#修改-Nginx-配置" class="headerlink" title="修改 Nginx 配置"></a>修改 Nginx 配置</h2><p>针对 Nginx 配置不同的上下文，可以针对服务器或者目录进行验证：</p><p><code>nginx.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;  </span><br><span class="line">                auth_basic &quot;HTTP Basic Authentication&quot;;  </span><br><span class="line">                auth_basic_user_file /etc/nginx/.htpasswd;  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="重载-Nginx"><a href="#重载-Nginx" class="headerlink" title="重载 Nginx"></a>重载 Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><h2 id="在-Dockerfile-中配置"><a href="#在-Dockerfile-中配置" class="headerlink" title="在 Dockerfile 中配置"></a>在 Dockerfile 中配置</h2><p>本示例基础镜像以 Ubuntu 或者 Debian 为基准，编辑 <code>Dockerfile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ENV BASE_AUTH=admin:adminadmin</span><br><span class="line"></span><br><span class="line">RUN apt-get install apache2-utils -y &amp;&amp; \</span><br><span class="line">    mkdir -p /etc/nginx &amp;&amp; \</span><br><span class="line">    echo $BASE_AUTH &gt; /etc/nginx/.htpasswd</span><br></pre></td></tr></table></figure><p><code>docker-nginx.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">auth_basic &quot;HTTP Basic Authentication&quot;;  </span><br><span class="line">auth_basic_user_file /etc/nginx/.htpasswd; </span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    try_files $uri /index.php =404;</span><br><span class="line">    fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">    fastcgi_pass php-fpm:9000;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME /var/www/html/$fastcgi_script_name;</span><br><span class="line">    include /etc/nginx/fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果一些 Web 系统（如：Kibana）没有提供用户认证管功能，可以使用 Nginx 反向代理启用 Base Auth。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Base Auth安全性低，不检验在外网直接使用，请务必添加SSL&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装-ht
      
    
    </summary>
    
      <category term="Linux" scheme="https://zh-h.github.io/categories/Linux/"/>
    
    
      <category term="Nginx" scheme="https://zh-h.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Servlet 示例</title>
    <link href="https://zh-h.github.io/2017/08/11/2017/08/11/kotlin-servlet/"/>
    <id>https://zh-h.github.io/2017/08/11/2017/08/11/kotlin-servlet/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加-Servlet-依赖"><a href="#添加-Servlet-依赖" class="headerlink" title="添加 Servlet 依赖"></a>添加 Servlet 依赖</h2><p>添加 JaveEE 的API，包含了 Servlet 的引用。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'javax'</span>, <span class="string">name:</span> <span class="string">'javaee-api'</span>, <span class="string">version:</span> <span class="string">'7.0'</span></span><br><span class="line">    compile <span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"</span></span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Gradle-Tomcat-Plugin"><a href="#Gradle-Tomcat-Plugin" class="headerlink" title="Gradle Tomcat Plugin"></a>Gradle Tomcat Plugin</h2><p><strong>使用 jetty plugin 无法加载注解的 servlet，请使用 tomcat plugin</strong></p><ol><li>编辑<code>gradle.build</code>,附加 tomcat 插件，配置启动任务。</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">"war"</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.bmuschko.tomcat'</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.bmuschko:gradle-tomcat-plugin:2.3'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="keyword">def</span> tomcatVersion = <span class="string">'8.5.16'</span></span><br><span class="line">    tomcat <span class="string">"org.apache.tomcat.embed:tomcat-embed-core:$&#123;tomcatVersion&#125;"</span>,</span><br><span class="line">            <span class="string">"org.apache.tomcat.embed:tomcat-embed-logging-juli:8.5.2"</span>,</span><br><span class="line">            <span class="string">"org.apache.tomcat.embed:tomcat-embed-jasper:$&#123;tomcatVersion&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tomcat &#123;</span><br><span class="line">    httpProtocol = <span class="string">'org.apache.coyote.http11.Http11Nio2Protocol'</span></span><br><span class="line">    ajpProtocol = <span class="string">'org.apache.coyote.ajp.AjpNio2Protocol'</span></span><br><span class="line">    contextPath = <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建<code>src/main/webapp</code>目录，添加<code>index.html</code>文件，编辑内容。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Kotlin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Kotlin<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加控制器"><a href="#添加控制器" class="headerlink" title="添加控制器"></a>添加控制器</h2><p>添加<code>me.zohar.kotlin.servlet.HelloController</code>，这个控制器继承了<code>HttpServlet</code>,并且调用默认的父类的构造方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.zohar.kotlin.servlet.controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.<span class="keyword">annotation</span>.WebServlet</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = <span class="meta-string">"Hello"</span>, value = <span class="meta-string">"/"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> : <span class="type">HttpServlet</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doGet</span><span class="params">(req: <span class="type">HttpServletRequest</span>, res: <span class="type">HttpServletResponse</span>)</span></span> &#123;</span><br><span class="line">        res.writer.write(<span class="string">"Hello, World!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><code>http://localhost:8080/</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;添加-Servlet-依赖&quot;&gt;&lt;a href=&quot;#添加-Servlet-依赖&quot; class=&quot;headerlink&quot; title=&quot;添加 Servlet 依赖&quot;&gt;&lt;/a&gt;添加 Servlet 依赖&lt;/h2&gt;&lt;p&gt;添加 JaveEE 的API，包含了 Servlet
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://zh-h.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://zh-h.github.io/tags/Kotlin/"/>
    
      <category term="Servlet" scheme="https://zh-h.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>PHP大型网站的架构总结</title>
    <link href="https://zh-h.github.io/2017/08/10/2017/08/10/large-PHP-website-architecture/"/>
    <id>https://zh-h.github.io/2017/08/10/2017/08/10/large-PHP-website-architecture/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2019-10-26T21:49:24.151Z</updated>
    
    <content type="html"><![CDATA[<p>本文对工作中接触到的部分架构进行归纳总结。</p><p>一个大型的Web系统，要面对上亿的注册用户，大量的用户内容，巨大的访问量还有EB级别的数据存储。</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>所有软件都要运行在操作系统上，因此操作系统要保证高效、稳定和安全。包管理工具提供丰富的、稳定、新的软件包也是重要的选择。</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>新潮，有很多软件包可以快速跟进；</p><p>简单，易用。</p><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>CentOS的生命周期是7年，基本上可以覆盖硬件的生命周期；</p><p>对硬件的支持更好（有些服务器是自行组装的机器）；</p><p>PXE 安装系统比 Ubuntu 快多了；</p><p>稳定。</p><h3 id="Windows-Server"><a href="#Windows-Server" class="headerlink" title="Windows Server"></a>Windows Server</h3><p>主要用途是特定平台的 Microso Office 文档转换服务。</p><h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><h3 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h3><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>本文接触到的体系主要使用的是动态语言，在运行环境/解释器中运行，需要保证运行的高效与稳定啊。</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>Web 服务器不能直接执行 PHP ， 当接收到请求后，会把请求交给 PHP 解释器处理，处理结果返回给客户端。</p><p>请求转发过程需要用到 CGI 管理器，使用 Nginx + PHP-FPM。</p><p>PHP-FPM 维护一个进程池，进程复用中处理多个请求，相比 Apache PHP-Mod 一个请求一个进程大大提高了处理速度、降低了内存消耗。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>主要用在消息推送系统中，相比 PHP 有以下显著优点：</p><ol><li><p>采用事件驱动、异步编程，为网络服务而设计。其实Javascript的匿名函数和闭包特性非常适合事件驱动、异步编程；</p></li><li><p>Node.js非阻塞模式的IO处理模式非常适合大量链接的客户端进行大量的数据推送（使用 Websocket 兼容 Web 端）。</p></li></ol><p>Node.js 的缺点也是显著的：</p><ol><li><p>可靠性低，回调出错难以排查，一个线程奔溃就需要重启整个进程；</p></li><li><p>单进程，单线程，只支持单核CPU。当前的集群方案也不能很好利用机器资源，还造成监控维护困难。</p></li></ol><h2 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h2><p>处理静态文件的访问，并且提供反向代理到内网的 Http 或者 Websocket 服务。需要运行集群，保证可用度。</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>一款轻量级、高性能的 Web 服务器/反向代理服务器，配合 PHP-FPM 能够得到更高的运行效率。</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h3><p>开源的分布式文件系统，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><p>MariaDB数据库管理系统是 MySQL 的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL。</p><p>使用 MariaDB 而不使用 MySQL 的原因是为了规避 Oracle 收购 MySQL 后协议变更导致的使用授权风险。</p><h4 id="MyCat"><a href="#MyCat" class="headerlink" title="MyCat"></a>MyCat</h4><p>单表、单库无法应对大量数据，所以需要进行数据库的拆分，数据库集群使用 MyCat 进行分表、分库、联合查询处理。</p><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>分布式的文档检索服务，可以提供文章页面的检索服务。</p><p>由于 Elasticsearch 提供了 JSON 的数据查询和存储模式，能够实现很多 NoSQL 的特性，因此也会在 Elasticsearch 直接存储标签等数据。相比关系数据库可以提供更快的查询速度。</p><p>各个模块的系统使用 Logstash 过滤日志存储到 Elasticsearch 中，使用 Kibana 进行查看，就是 ELK 日志处理方案。</p><h3 id="CouchDB"><a href="#CouchDB" class="headerlink" title="CouchDB"></a>CouchDB</h3><p>使用 CouchDB 进行 Web 集群的 Session 共享。</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>提供了丰富的数据结构，可以在应用中执行各种缓存，分布式提供大量数据、高可用的服务。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="HaProxy"><a href="#HaProxy" class="headerlink" title="HaProxy"></a>HaProxy</h3><p>提供高可用性、负载均衡以及基于TCP（第四层）和HTTP（第七层）应用的代理。</p><p>Redis 使用 HAProxy 实现分布式集群。</p><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><h3 id="Rabbit-MQ"><a href="#Rabbit-MQ" class="headerlink" title="Rabbit MQ"></a>Rabbit MQ</h3><ol><li><p>耗时任务（视频转码，文档转换）需要发送到消息队列中，然后由大量的 Worker 进行处理，处理结果返回到消息队列中，或者持久化到数据库。</p></li><li><p>缓冲大量并发的访问，进行流量削峰。</p></li></ol><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><h3 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h3><p>高效、多语言的远程执行框架。</p><h3 id="Yar"><a href="#Yar" class="headerlink" title="Yar"></a>Yar</h3><p>PHP 使用的并行化远程执行框架。</p><h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><h3 id="Gearman"><a href="#Gearman" class="headerlink" title="Gearman"></a>Gearman</h3><p>把任务分发到不同的进程中处理，对工作进行并行化和负载均衡处理。</p><h2 id="运维监控"><a href="#运维监控" class="headerlink" title="运维监控"></a>运维监控</h2><h3 id="Puppet"><a href="#Puppet" class="headerlink" title="Puppet"></a>Puppet</h3><p>自动化配置和管理工具，可以通过集群对大量的服务器进行管理。</p><p>自动化运维系统中通过 Puppet 推送执行脚本到指定的服务器群组。</p><h3 id="Cacti"><a href="#Cacti" class="headerlink" title="Cacti"></a>Cacti</h3><p>网络流量监控，rrdtool 生成图标。</p><h3 id="Nagios"><a href="#Nagios" class="headerlink" title="Nagios"></a>Nagios</h3><ol><li><p>监控系统、应用和交换机网络设备；</p></li><li><p>自定义监控规则；</p></li><li><p>插件提供邮件、短信、微信乃至电话的告警通知。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文对工作中接触到的部分架构进行归纳总结。&lt;/p&gt;
&lt;p&gt;一个大型的Web系统，要面对上亿的注册用户，大量的用户内容，巨大的访问量还有EB级别的数据存储。&lt;/p&gt;
&lt;h2 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="PHP" scheme="https://zh-h.github.io/categories/PHP/"/>
    
    
  </entry>
  
</feed>
